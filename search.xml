<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown常用命令</title>
    <url>/2022/09/03/Markdown%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="这是一篇用于测试的页面"><a href="#这是一篇用于测试的页面" class="headerlink" title="这是一篇用于测试的页面"></a>这是一篇用于测试的页面</h1><h1 id="2022-9-5"><a href="#2022-9-5" class="headerlink" title="2022.9.5"></a>2022.9.5</h1><p>今天想学习如何插入图片和代码表示：</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>查了一下是代码表示为<code>tab上面的那个</code></p>
<p>成功啦</p>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>图片为为<code>![名称](地址)</code>，试下：</p>
<p><img src="https://pbs.twimg.com/media/FdLE8ipagAAA1qP?format=jpg&amp;name=large" alt="图片测试"></p>
<p>成功啦！</p>
<h1 id="2022-9-6"><a href="#2022-9-6" class="headerlink" title="2022.9.6"></a>2022.9.6</h1><p>今天学习下如何使用LaTeX公式，代码和注释：</p>
<h2 id="公式："><a href="#公式：" class="headerlink" title="公式："></a>公式：</h2><p>如果有文章需要开启LaTeX，记得在开头加上<code>mathjax: ture</code></p>
<p>貌似和LaTeX没有什么变化，一个美元是文本中的公式，两个美元是换行单独一行的公式,不好意思这里没办法打符号给大家看，用了转义符也没有显示。</p>
<p>这里另外说一点，如果特殊符号转义只要在前面加<code>\</code>就可以了。</p>
<p>试一下写个欧拉公式：</p>
<script type="math/tex; mode=display">e^{i\pi }+1=0</script><p>成功啦！</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><h3 id="方法1：用tab键直接实现："><a href="#方法1：用tab键直接实现：" class="headerlink" title="方法1：用tab键直接实现："></a>方法1：用<code>tab</code>键直接实现：</h3><p>测试一下：</p>
<pre><code>print&quot;hello world!&quot;
</code></pre><p>成功啦！</p>
<h3 id="方法2：用-包裹代码："><a href="#方法2：用-包裹代码：" class="headerlink" title="方法2：用```包裹代码："></a>方法2：用```包裹代码：</h3><p>测试一下：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print&quot;hello world!&quot;</span><br></pre></td></tr></table></figure></p>
<p>成功啦！</p>
<h2 id="写注释"><a href="#写注释" class="headerlink" title="写注释"></a>写注释</h2><p>有几张方法，不过写一个最简单的就好了：<code>&lt;！--写注释--&gt;</code></p>
<p>测试一下：</p>
<!--写注释-->
<p>成功啦！哈哈哈当然你们看不到！</p>
<h1 id="2022-9-7"><a href="#2022-9-7" class="headerlink" title="2022.9.7"></a>2022.9.7</h1><p>今天试着插入图片，之前插入的图片来源于Twitter，我今天试试Baidu的和本地的，看下能不能成功：</p>
<h2 id="Baidu图片插入"><a href="#Baidu图片插入" class="headerlink" title="Baidu图片插入"></a>Baidu图片插入</h2><p>图片为为<code>![名称](地址)</code>，试下：</p>
<p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.577865b6804b46b74fbd1f90c32ab050?rik=wyyAsnT8byDlHQ&amp;riu=http%3a%2f%2fwww.bkill.com%2fu%2fupload%2f2018%2f03%2f13%2f140123254153.jpg&amp;ehk=duhXRwn7iwcIknm%2bTohI3sS200c%2fEKqnxxx0TFJWFMU%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0" alt="Baidu图片测试"></p>
<p>成功啦！</p>
<h2 id="本地图片插入"><a href="#本地图片插入" class="headerlink" title="本地图片插入"></a>本地图片插入</h2><p>1.试了下base64转码<a href="https://base64.us/">转码地址</a>这个是可以成功的，但是一大串代码放在我的md里面我看着非常难受，所以我试下用其他的方法；</p>
<p>2.直接把图片放在一个文件夹里试试：</p>
<p><img src="/images/0.jpg" alt="本地图片测试"> </p>
<p><img src="/images/1.png" alt="图片暂存"></p>
<p><strong>可以直接复制图片至文章中</strong></p>
<p>成功了！</p>
<h1 id="2022-9-8"><a href="#2022-9-8" class="headerlink" title="2022.9.8"></a>2022.9.8</h1><p>今天主要是弄了优化，实际上有些bug，无语了</p>
<h1 id="2022-9-10"><a href="#2022-9-10" class="headerlink" title="2022.9.10"></a>2022.9.10</h1><p>中秋节快乐！</p>
<p>昨天忘记记录了，不过也没干什么事情，出去玩了哈哈哈哈</p>
<p>今天美化了一下我的blog，好看多了哈哈哈哈</p>
<h2 id="置顶文章"><a href="#置顶文章" class="headerlink" title="置顶文章"></a>置顶文章</h2><p>如果需要对某篇文章进行置顶，只需要加入<code>sticky: 1</code>就可，详细可看<code>Myblog</code>已经置顶！</p>
<p>成功啦！</p>
<h2 id="给文章加封面"><a href="#给文章加封面" class="headerlink" title="给文章加封面"></a>给文章加封面</h2><p>在开头加入<code>cover: (图片地址)</code></p>
<p>成功啦！</p>
<h1 id="2023-3-27"><a href="#2023-3-27" class="headerlink" title="2023.3.27"></a>2023.3.27</h1><p>久违的更新，补充一下对文章的加密</p>
<h2 id="准备工作（我的已完成）"><a href="#准备工作（我的已完成）" class="headerlink" title="准备工作（我的已完成）"></a>准备工作（我的已完成）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-blog-encrypt --save</span><br></pre></td></tr></table></figure>
<h2 id="把代码放在文章顶部"><a href="#把代码放在文章顶部" class="headerlink" title="把代码放在文章顶部"></a>把代码放在文章顶部</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password: test</span><br><span class="line">message: 测试加密，这里的密码是：test</span><br></pre></td></tr></table></figure>
<p>我以<a href="https://aurora7july.github.io/2022/10/25/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/">“量子力学”</a>这篇为例试验一下：</p>
<p>成功了！</p>
<h1 id="2023-12-20"><a href="#2023-12-20" class="headerlink" title="2023.12.20"></a>2023.12.20</h1><h2 id="如何改变字颜色"><a href="#如何改变字颜色" class="headerlink" title="如何改变字颜色"></a>如何改变字颜色</h2><ul>
<li><font color=red>红字</font>

</li>
</ul>
<h1 id="Markdown三线表"><a href="#Markdown三线表" class="headerlink" title="Markdown三线表"></a>Markdown三线表</h1><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p>
<p>语法格式如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody>
<tr>
<td>单元格</td>
<td>单元格</td>
</tr>
<tr>
<td>单元格</td>
<td>单元格</td>
</tr>
</tbody>
</table>
</div>
<p>我们可以设置表格的对齐方式：</p>
<p>-: 设置内容和标题栏居右对齐。<br>:- 设置内容和标题栏居左对齐。<br>:-: 设置内容和标题栏居中对齐。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Python每日练习</title>
    <url>/2023/11/01/Python%E6%AF%8F%E6%97%A5%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="2023-11-1练习"><a href="#2023-11-1练习" class="headerlink" title="2023.11.1练习"></a>2023.11.1练习</h1><h2 id="问题1："><a href="#问题1：" class="headerlink" title="问题1："></a>问题1：</h2><p>编写一个程序，要求用户输入一个正整数，然后计算该整数的阶乘并输出结果。阶乘是指将一个整数与小于它的所有正整数相乘的结果。例如，5的阶乘是5 <em> 4 </em> 3 <em> 2 </em> 1 = 120。</p>
<h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><ul>
<li>提示用户输入一个正整数。</li>
<li>检查用户输入是否是正整数，如果不是，显示错误消息并要求重新输入。</li>
<li>计算输入整数的阶乘。</li>
<li>输出计算结果。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#提示用户输入</span><br><span class="line">num = input(&quot;请阁下输入一个正整数：&quot;) </span><br><span class="line"></span><br><span class="line">#判断用户输入是否是正整数</span><br><span class="line">if num.isdigit(): </span><br><span class="line">   num = int(num)</span><br><span class="line">   if num &gt; 0:</span><br><span class="line">      print(f&quot;&#123;num&#125;是一个正整数&quot;)</span><br><span class="line">   else:</span><br><span class="line">      print(f&quot;&#123;num&#125;不是正整数，请阁下重新输入&quot;)</span><br><span class="line">else:</span><br><span class="line">   print(f&quot;&#123;num&#125;不是正整数，请阁下重新输入&quot;) </span><br><span class="line"></span><br><span class="line">#计算整数的阶乘</span><br><span class="line">result = 1</span><br><span class="line">for i in range(1, num+1):</span><br><span class="line">    result *= i</span><br><span class="line">print(f&quot;&#123;num&#125;的阶乘为:&#123;result&#125;&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="问题2："><a href="#问题2：" class="headerlink" title="问题2："></a>问题2：</h2><p> 编写一个Python程序，要求用户输入一个字符串，然后判断这个字符串是否是回文字符串。回文字符串是指正着读和倒着读都一样的字符串，例如 “level”、”radar” 和 “madam” 都是回文字符串。</p>
<h2 id="要求：-1"><a href="#要求：-1" class="headerlink" title="要求："></a>要求：</h2><ul>
<li>提示用户输入一个字符串。</li>
<li>忽略字符串中的空格，标点符号和大小写（将所有字符转换为小写）。</li>
<li>判断输入的字符串是否是回文字符串。</li>
<li>输出相应的结果，指出是否是回文字符串。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">#提示用户输入</span><br><span class="line">user_input = input(&quot;请阁下输入一个字符串：&quot;)</span><br><span class="line"></span><br><span class="line">#移除空格，标点和大小写</span><br><span class="line">user_input = user_input.replace(&quot; &quot;, &quot;&quot;) #移除空格</span><br><span class="line">user_input = re.sub(r&#x27;[^\w\s]&#x27;,&#x27;&#x27;,user_input) #移除符号标点</span><br><span class="line">user_input = user_input.lower() #转换为小写</span><br><span class="line"></span><br><span class="line">#判断输入的字符是否是回文字符串</span><br><span class="line">fan_input = user_input[::-1] #创建反向字符串</span><br><span class="line">if fan_input == user_input: #判断是否是回文字符串</span><br><span class="line">    print(f&quot;恭喜阁下，&#123;user_input&#125;是回文字符串！&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(f&quot;很抱歉，&#123;user_input&#125;并不是回文字符串&quot;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="2023-11-5练习"><a href="#2023-11-5练习" class="headerlink" title="2023.11.5练习"></a>2023.11.5练习</h1><h2 id="问题1：-1"><a href="#问题1：-1" class="headerlink" title="问题1："></a>问题1：</h2><p>写一个Python程序，找出一个列表中的所有奇数，并将它们存储在一个新的列表中。</p>
<h2 id="要求：-2"><a href="#要求：-2" class="headerlink" title="要求："></a>要求：</h2><ul>
<li>创建一个函数，该函数接受一个整数列表作为参数。</li>
<li>函数应该返回一个新的列表，其中包含原列表中的所有奇数。</li>
<li>不要使用内置的filter函数或列表解析来完成任务。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def find_odd_numbers(input_list): #定义奇数函数</span><br><span class="line">   odd_numbers = [] #形成一个列表</span><br><span class="line">   input_list = input_list.split(&quot;,&quot;) #对列表进行切片</span><br><span class="line">   input_list = [int(num.strip()) for num in input_list] #检查奇数</span><br><span class="line">   input_list = [int(num_str.strip()) for num_str in input_list]  # 更改变量名</span><br><span class="line"></span><br><span class="line">   for num in input_list: #遍历列表</span><br><span class="line">      if num % 2 != 0:</span><br><span class="line">         odd_numbers.append(num)</span><br><span class="line">         </span><br><span class="line">   return odd_numbers</span><br><span class="line"></span><br><span class="line">user_input = input(&quot;请阁下输入一串列表(用，隔开): &quot;)</span><br><span class="line">result = find_odd_numbers(user_input)</span><br><span class="line">print(&quot;奇数列表：&quot;, result)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="问题2：-1"><a href="#问题2：-1" class="headerlink" title="问题2："></a>问题2：</h2><p>编写一个Python程序，计算斐波那契数列的第n个数字，其中n是非负整数。<br>斐波那契数列的定义如下：<br>1.第0个和第1个数字分别为0和1。<br>2.从第2个数字开始，每个数字都是前两个数字之和</p>
<h2 id="要求：-3"><a href="#要求：-3" class="headerlink" title="要求："></a>要求：</h2><ul>
<li>创建一个函数，接受一个非负整数n作为参数。</li>
<li>函数应该返回斐波那契数列的第n个数字。</li>
<li>请使用递归方式来解决这个问题。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#定义斐波那契数列的函数</span><br><span class="line">def fibonacci(n):</span><br><span class="line">   if n &lt;= 0:</span><br><span class="line">      return 0</span><br><span class="line">   elif n == 1:</span><br><span class="line">      return 1</span><br><span class="line">   else:</span><br><span class="line">      return fibonacci(n-1) + fibonacci(n-2)</span><br><span class="line"></span><br><span class="line">#提示用户输入</span><br><span class="line">user_input = input(&quot;请阁下输入一个非负整数&quot;)</span><br><span class="line"></span><br><span class="line">#测试用户输入的是否是一个非负整数</span><br><span class="line">try:</span><br><span class="line">   user_input = int(user_input)</span><br><span class="line">   if user_input &lt; 0:</span><br><span class="line">    print(&quot;让你打非负整数你不听,你XX!&quot;)</span><br><span class="line">   else:</span><br><span class="line">    result =  fibonacci(user_input)</span><br><span class="line">except ValueError:</span><br><span class="line">    print(&quot;输入什么玩意儿，让你输入一个非负整数&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="2023-11-6练习"><a href="#2023-11-6练习" class="headerlink" title="2023.11.6练习"></a>2023.11.6练习</h1><h2 id="问题1：-2"><a href="#问题1：-2" class="headerlink" title="问题1："></a>问题1：</h2><p>猜数字游戏</p>
<h2 id="要求：-4"><a href="#要求：-4" class="headerlink" title="要求："></a>要求：</h2><p>编写一个Python程序，实现一个简单的猜数字游戏。程序随机生成一个1到100之间的整数，然后要求玩家猜这个数字，直到玩家猜中为止。程序需要提供反馈，告诉玩家他们的猜测是太高还是太低。最后，当玩家猜中数字时，显示猜测次数和祝贺消息。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import random</span><br><span class="line">def guess_num():</span><br><span class="line">   real_num = random.randint(1,100)</span><br><span class="line">   attempts = 0</span><br><span class="line"></span><br><span class="line">   while True:</span><br><span class="line">      user_num = int(input(&quot;请猜测一下目标数字为(在1-100间选择)：&quot;))</span><br><span class="line">      attempts += 1</span><br><span class="line"></span><br><span class="line">      if user_num &lt; real_num:</span><br><span class="line">         print(&quot;结果与猜测不符，有点小，请再试一次&quot;)</span><br><span class="line">      elif user_num &gt; real_num:</span><br><span class="line">         print(&quot;结果与猜测不符，有点大，请再试一次&quot;)</span><br><span class="line">      else:</span><br><span class="line">         print(f&quot;恭喜阁下猜中了！目标数字为&#123;real_num&#125;，与阁下猜测的&#123;user_num&#125;完全一致！您真是一个小天才！&quot;)</span><br><span class="line">         break</span><br><span class="line"></span><br><span class="line">guess_num()</span><br></pre></td></tr></table></figure></p>
<h2 id="问题2：-2"><a href="#问题2：-2" class="headerlink" title="问题2："></a>问题2：</h2><p>查找最大元素</p>
<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>编写一个Python函数，接受一个包含整数的列表作为参数，然后找到列表中的最大元素，并返回该最大元素的值。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def find_max_element(lst): # 初始化最大元素为列表的第一个元素</span><br><span class="line">    max_element = lst[0]</span><br><span class="line"></span><br><span class="line">    # 使用循环遍历列表中的每个元素</span><br><span class="line">    for num in lst:</span><br><span class="line">        # 如果当前元素比最大元素大，更新最大元素的值</span><br><span class="line">        if num &gt; max_element:</span><br><span class="line">            max_element = num</span><br><span class="line"></span><br><span class="line">    # 返回最大元素的值</span><br><span class="line">    return max_element</span><br><span class="line"></span><br><span class="line"># 示例使用</span><br><span class="line">numbers = [12, 45, 62, 88, 34, 98, 75]</span><br><span class="line">result = find_max_element(numbers)</span><br><span class="line">print(f&quot;列表中的最大元素是 &#123;result&#125;&quot;)</span><br></pre></td></tr></table></figure></p>
<h1 id="2023-11-12练习"><a href="#2023-11-12练习" class="headerlink" title="2023.11.12练习"></a>2023.11.12练习</h1><h2 id="问题1：简单的购物清单"><a href="#问题1：简单的购物清单" class="headerlink" title="问题1：简单的购物清单"></a>问题1：简单的购物清单</h2><h2 id="要求：-5"><a href="#要求：-5" class="headerlink" title="要求："></a>要求：</h2><ol>
<li>初始化一个空的购物清单。</li>
<li>提示用户选择操作：添加商品、显示购物清单或退出。</li>
<li>如果用户选择添加商品，程序应该提示用户输入商品名称和价格，然后将商品添加到购物清单。</li>
<li>如果用户选择显示购物清单，程序应该输出当前购物清单中的所有商品及其总价格。</li>
<li>如果用户选择退出，程序应该结束运行。</li>
<li>在每次循环后，再次显示操作选项。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import random</span><br><span class="line"></span><br><span class="line">def menu():</span><br><span class="line">   print(&quot;欢迎使用购物清单程序!\n操作选项：\n1. 添加商品\n2. 显示购物清单\n3. 退出&quot;)</span><br><span class="line"></span><br><span class="line">def add(shopping_list):</span><br><span class="line">   name = input(&quot;请输入商品的名称：&quot;)</span><br><span class="line">   price = input(&quot;请输入商品的价格：&quot;)</span><br><span class="line">   shopping_list[name] = price</span><br><span class="line">   print(f&quot;&#123;name&#125;已添加至购物车 \n &quot;)</span><br><span class="line"></span><br><span class="line">def display(shopping_list):</span><br><span class="line">   if not shopping_list:</span><br><span class="line">      print(&quot;购物车竟然是空的！再忙，也记得买点什么犒劳下自己&quot;)</span><br><span class="line">   else:</span><br><span class="line">      print(&quot;当前购物清单：&quot;)</span><br><span class="line">      for name, price in shopping_list.items():</span><br><span class="line">         print(f&quot; &#123;name&#125;: &#123;price&#125;&quot;)</span><br><span class="line">      total = sum(shopping_list.values())</span><br><span class="line">      print(f&quot;总价格为：&#123;total&#125; \n&quot;)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    shopping_list = &#123;&#125;</span><br><span class="line">    while True:</span><br><span class="line">        menu()</span><br><span class="line">        choice = input(&quot;请选择操作 (1/2/3): &quot;)</span><br><span class="line"></span><br><span class="line">        if choice == &#x27;1&#x27;:</span><br><span class="line">            add(shopping_list)</span><br><span class="line">        elif choice == &#x27;2&#x27;:</span><br><span class="line">            display(shopping_list)</span><br><span class="line">        elif choice == &#x27;3&#x27;:</span><br><span class="line">            print(&quot;退出也没有，摇一摇等下又见面了&quot;)</span><br><span class="line">            break</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;你在说什么？ \n&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="2023-12-20练习"><a href="#2023-12-20练习" class="headerlink" title="2023.12.20练习"></a>2023.12.20练习</h1><h2 id="问题1：猜单词游戏"><a href="#问题1：猜单词游戏" class="headerlink" title="问题1：猜单词游戏"></a>问题1：猜单词游戏</h2><h2 id="要求：-6"><a href="#要求：-6" class="headerlink" title="要求："></a>要求：</h2><ol>
<li>使用一个包含多个单词的列表作为单词库。</li>
<li>在游戏开始时，随机选择一个单词作为目标单词。</li>
<li>显示一个由下划线组成的部分单词，初始时下划线的位置与目标单词相对应。</li>
<li>允许玩家猜测字母，显示已经猜对的字母，并更新部分单词的显示。</li>
<li>显示玩家已经猜过的字母列表。</li>
<li>如果玩家在规定次数内猜对了整个单词，显示祝贺消息。如果猜错了6次，显示失败消息。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import random</span><br><span class="line"></span><br><span class="line"># 创建词库</span><br><span class="line">def choose_word():</span><br><span class="line">    word_list = [&quot;python&quot;, &quot;programming&quot;, &quot;challenge&quot;, &quot;coding&quot;, &quot;computer&quot;]</span><br><span class="line">    return random.choice(word_list)</span><br><span class="line"></span><br><span class="line"># 显示部分单词</span><br><span class="line">def display_partial_word(word, guessed_letters):</span><br><span class="line">    partial_word = &quot;&quot;   # 初始化字符串为空</span><br><span class="line">    for letter in word:   # 遍历目标单词的每个字符</span><br><span class="line">        if letter in guessed_letters: # 如果字母已经在已猜过的字母列表中</span><br><span class="line">            partial_word += letter # 将字母添加到部分单词中</span><br><span class="line">        else:</span><br><span class="line">            partial_word += &quot;_&quot;  # 否则，用下划线代替未猜对的字母</span><br><span class="line">    return partial_word</span><br><span class="line"></span><br><span class="line"># 游戏主循环</span><br><span class="line">def main():</span><br><span class="line">    target_word = choose_word()</span><br><span class="line">    guessed_letters = []</span><br><span class="line">    max_attempts = 6 #最大猜测次数</span><br><span class="line">    attempts = 0 #初始值</span><br><span class="line"></span><br><span class="line">    print(&quot;欢迎来到猜字母游戏!&quot;)</span><br><span class="line">    print(display_partial_word(target_word, guessed_letters))</span><br><span class="line"></span><br><span class="line">    while True:</span><br><span class="line">        guess = input(&quot;猜一个字母: &quot;).lower()</span><br><span class="line"></span><br><span class="line">        if len(guess) != 1 or not guess.isalpha():</span><br><span class="line">            print(&quot;请输入一个有效的字母。&quot;)</span><br><span class="line">            continue</span><br><span class="line"></span><br><span class="line">        if guess in guessed_letters:</span><br><span class="line">            print(&quot;你已经猜过这个字母了。&quot;)</span><br><span class="line">            continue</span><br><span class="line"></span><br><span class="line">        guessed_letters.append(guess)</span><br><span class="line"></span><br><span class="line">        if guess not in target_word:</span><br><span class="line">            attempts += 1</span><br><span class="line">            print(f&quot;猜错了！还剩余 &#123;max_attempts - attempts&#125; 次机会。&quot;)</span><br><span class="line"></span><br><span class="line">        partial_word = display_partial_word(target_word, guessed_letters)</span><br><span class="line">        print(partial_word)</span><br><span class="line"></span><br><span class="line">        if &quot;_&quot; not in partial_word:</span><br><span class="line">            print(&quot;恭喜你，你猜对了！&quot;)</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">        if attempts == max_attempts:</span><br><span class="line">            print(f&quot;很遗憾，你没有在规定次数内猜对。正确答案是: &#123;target_word&#125;&quot;)</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="2024-1-8练习"><a href="#2024-1-8练习" class="headerlink" title="2024.1.8练习"></a>2024.1.8练习</h1><h2 id="问题1：学生成绩管理系统"><a href="#问题1：学生成绩管理系统" class="headerlink" title="问题1：学生成绩管理系统"></a>问题1：学生成绩管理系统</h2><h3 id="要求：-7"><a href="#要求：-7" class="headerlink" title="要求："></a>要求：</h3><p>你需要设计一个简单的学生成绩管理系统。系统应该包括以下功能：</p>
<ol>
<li>添加学生：添加学生的姓名和成绩。</li>
<li>显示学生列表：显示所有学生的姓名和成绩。</li>
<li>搜索学生：通过学生姓名查找并显示其成绩。</li>
<li>计算平均成绩：计算并显示所有学生的平均成绩。</li>
</ol>
<p>你可以选择使用列表、字典或其他数据结构来存储学生信息。为了简化问题，你可以假设每个学生的姓名都是唯一的。</p>
<h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 学生列表创建</span><br><span class="line">students_list = []</span><br><span class="line"></span><br><span class="line"># 添加学生名字及成绩</span><br><span class="line">while True:</span><br><span class="line">    name = input(&quot;请输入学生名字：&quot;)</span><br><span class="line">    grade = float(input(&quot;请输入学生成绩：&quot;))  # 将输入转换为浮点数</span><br><span class="line"></span><br><span class="line"># 学生信息存储</span><br><span class="line">    students_info = (name, grade)</span><br><span class="line">    students_list.append(students_info)</span><br><span class="line"></span><br><span class="line"># 询问用户是否继续添加学生信息</span><br><span class="line">    add_another = input(&quot;是否要添加另一个学生信息？(y/n): &quot;).lower()</span><br><span class="line">    if add_another != &#x27;y&#x27;:</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line"># 显示学生列表</span><br><span class="line">print(&quot;学生列表：&quot;)</span><br><span class="line">for student in students_list:</span><br><span class="line">    print(f&quot;姓名: &#123;student[0]&#125;, 成绩: &#123;student[1]&#125;&quot;)</span><br><span class="line"></span><br><span class="line"># 计算平均成绩</span><br><span class="line">total_grade = sum(student[1] for student in students_list)</span><br><span class="line">average_grade = total_grade / len(students_list)</span><br><span class="line">print(f&quot;平均成绩：&#123;average_grade&#125;&quot;)</span><br><span class="line"></span><br><span class="line"># 搜索学生</span><br><span class="line">search_name = input(&quot;请输入要搜索的学生名字：&quot;)</span><br><span class="line">found = False</span><br><span class="line"></span><br><span class="line">for student in students_list:</span><br><span class="line">    if student[0] == search_name:</span><br><span class="line">        print(f&quot;&#123;search_name&#125;的成绩是：&#123;student[1]&#125;&quot;)</span><br><span class="line">        found = True</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">if not found:</span><br><span class="line">    print(f&quot;找不到&#123;search_name&#125;学生&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="2024-1-24练习"><a href="#2024-1-24练习" class="headerlink" title="2024.1.24练习"></a>2024.1.24练习</h1><h2 id="题目：电影评分统计"><a href="#题目：电影评分统计" class="headerlink" title="题目：电影评分统计"></a>题目：电影评分统计</h2><h3 id="要求：-8"><a href="#要求：-8" class="headerlink" title="要求："></a>要求：</h3><p>你需要设计一个电影评分统计系统。系统应该包括以下功能：</p>
<ol>
<li>添加电影： 用户可以添加电影的名称和评分。</li>
<li>显示电影列表： 显示所有电影的名称和评分。</li>
<li>搜索电影： 通过电影名称查找并显示其评分。</li>
<li>计算平均评分： 计算并显示所有电影的平均评分。</li>
<li>推荐电影： 根据电影的平均评分，推荐一部用户可能喜欢的电影。推荐可以简单地选择平均评分较高的电影之一。</li>
</ol>
<h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 电影列表建立</span><br><span class="line">movies_list = []</span><br><span class="line"></span><br><span class="line"># 添加电影名字</span><br><span class="line">while True:</span><br><span class="line">    movies_name = input(&quot;请输入电影名字：&quot;)</span><br><span class="line">    movies_evaluate = float(input(&quot;请阁下为电影评分：&quot;))</span><br><span class="line"></span><br><span class="line"># 存储电影</span><br><span class="line">    movies = (movies_name, movies_evaluate)</span><br><span class="line">    movies_list.append(movies)</span><br><span class="line"></span><br><span class="line"># 询问用户是否继续添加信息</span><br><span class="line">    add_another = input(&quot;阁下是否还需要添加其他电影？(y/n): &quot;).lower()</span><br><span class="line">    if add_another != &#x27;y&#x27;:</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line"># 显示电影列表</span><br><span class="line">print(&quot;电影列表：&quot;)</span><br><span class="line">for movies in movies_list:</span><br><span class="line">    print(f&quot;电影名：&#123;movies[0]&#125;, 评分：&#123;movies[1]&#125;&quot;)</span><br><span class="line"></span><br><span class="line"># 搜索电影</span><br><span class="line">search_movies = input(&quot;请阁下输入要搜索的电影名字：&quot;)</span><br><span class="line">found = False</span><br><span class="line"></span><br><span class="line">for movies in movies_list:</span><br><span class="line">    if movies[0] == search_movies:</span><br><span class="line">        print(f&quot;&#123;search_movies&#125;的评分是：&#123;movies[1]&#125;&quot;)</span><br><span class="line">        found = True</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">if not found:</span><br><span class="line">    print(f&quot;很抱歉，没有找到&#123;search_movies&#125;的相关信息&quot;)</span><br><span class="line"></span><br><span class="line"># 计算平均分</span><br><span class="line">total_grade = sum(movies[1] for movies in movies_list)</span><br><span class="line">average_grade = total_grade / len(movies_list)</span><br><span class="line">print(f&quot;所有电影的平均评分为：&quot;)</span><br><span class="line"></span><br><span class="line"># 推荐电影：</span><br><span class="line">recommend_movies = None</span><br><span class="line">hight_rating = 0</span><br><span class="line"></span><br><span class="line">for movies in movies_list:</span><br><span class="line">    if movies[1] &gt; hight_rating:</span><br><span class="line">        hight_rating = movies[1]</span><br><span class="line">        recommend_movies = movies[0]</span><br><span class="line"></span><br><span class="line">if recommend_movies:</span><br><span class="line">    print(f&quot;这是我根据平均分为阁下推荐的电影：&#123;recommend_movies&#125;,&#123;hight_rating&#125;&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;很抱歉，暂无可推荐的电影&quot;)</span><br></pre></td></tr></table></figure>
<h1 id="2024-1-25"><a href="#2024-1-25" class="headerlink" title="2024.1.25"></a>2024.1.25</h1><h2 id="题目：简单爬虫-获取新闻标题"><a href="#题目：简单爬虫-获取新闻标题" class="headerlink" title="题目：简单爬虫 - 获取新闻标题"></a>题目：简单爬虫 - 获取新闻标题</h2><h3 id="要求：-9"><a href="#要求：-9" class="headerlink" title="要求："></a>要求：</h3><p>编写一个 Python 程序，实现以下功能：</p>
<ol>
<li>使用 Requests 库向某个新闻网站发起请求，获取网页的 HTML 内容。</li>
<li>使用 BeautifulSoup 库解析 HTML 内容，提取新闻标题。</li>
<li>将提取到的新闻标题打印输出或保存到文件中。</li>
</ol>
<h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line"></span><br><span class="line"># 替换成你选择的新闻网站的URL</span><br><span class="line">url = &quot;https://www.bbc.com/news&quot;</span><br><span class="line"></span><br><span class="line"># 发起请求获取网页内容</span><br><span class="line">response = requests.get(url)</span><br><span class="line"></span><br><span class="line"># 检查请求是否成功</span><br><span class="line">if response.status_code == 200:</span><br><span class="line">    html_content = response.text</span><br><span class="line"></span><br><span class="line">    # 使用BeautifulSoup解析HTML</span><br><span class="line">    soup = BeautifulSoup(html_content, &#x27;html.parser&#x27;)</span><br><span class="line"></span><br><span class="line">    # 使用选择器提取新闻标题</span><br><span class="line">    # 根据实际HTML结构修改选择器</span><br><span class="line">    titles = soup.select(&#x27;h3&#x27;)</span><br><span class="line"></span><br><span class="line">    # 打印或保存新闻标题</span><br><span class="line">    if titles:</span><br><span class="line">        for title in titles:</span><br><span class="line">            print(title.text.strip())</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;未找到符合选择器的标题元素。&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(f&quot;请求失败，状态码：&#123;response.status_code&#125;&quot;)</span><br></pre></td></tr></table></figure>
<h1 id="2024-5-6"><a href="#2024-5-6" class="headerlink" title="2024.5.6"></a>2024.5.6</h1><h2 id="作者有话要说"><a href="#作者有话要说" class="headerlink" title="作者有话要说"></a>作者有话要说</h2><p>好久没更新这个系列了，时间一晃4个月过去了，实在抱歉抱歉，接下来会认真对待</p>
<h2 id="题目：计算字符串中的元音字母数量"><a href="#题目：计算字符串中的元音字母数量" class="headerlink" title="题目：计算字符串中的元音字母数量"></a>题目：计算字符串中的元音字母数量</h2><p>请编写一个Python程序，输入一个字符串，然后计算并输出该字符串中元音字母（a, e, i, o, u）的数量。要求程序对大小写字母均能正确处理。</p>
<p>例如：<br>输入: “Hello World”<br>输出: 3</p>
<p>提示：<br>可以使用input()函数获取用户输入的字符串。<br>为了简化问题，只需考虑英文字母a, e, i, o, u作为元音。<br>可以使用字符串的.lower()或.upper()方法来统一处理大小写问题。<br>利用循环遍历字符串中的每个字符，并检查是否是元音字母。</p>
<h3 id="解答：-1"><a href="#解答：-1" class="headerlink" title="解答："></a>解答：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#用户输入</span><br><span class="line">user_input = input(&quot;请阁下输入一个字符串：&quot;)</span><br><span class="line"></span><br><span class="line">#统一大小写</span><br><span class="line">input_string = user_input.lower() </span><br><span class="line"></span><br><span class="line">#定义元音字母</span><br><span class="line">zimu = &#x27;aeiou&#x27;</span><br><span class="line"></span><br><span class="line">#初始化元音数</span><br><span class="line">zimu_count = 0</span><br><span class="line"></span><br><span class="line">#遍历字符串</span><br><span class="line">for char in input_string:</span><br><span class="line">    if char in zimu:</span><br><span class="line">        zimu_count += 1</span><br><span class="line"></span><br><span class="line">#输出</span><br><span class="line">print(&quot;元音字母的数量是：&quot;, zimu_count)</span><br></pre></td></tr></table></figure>
<h1 id="2024-5-7"><a href="#2024-5-7" class="headerlink" title="2024.5.7"></a>2024.5.7</h1><h2 id="题目：统计列表中各元素的出现次数并输出结果"><a href="#题目：统计列表中各元素的出现次数并输出结果" class="headerlink" title="题目：统计列表中各元素的出现次数并输出结果"></a>题目：统计列表中各元素的出现次数并输出结果</h2><p>编写一个Python程序，要求用户输入一系列整数（可以是空格分隔的一行输入），然后程序会统计每个数字出现的次数，并以字典形式输出。每个键值对中的键是数字，值是该数字出现的次数。</p>
<h3 id="解答：-2"><a href="#解答：-2" class="headerlink" title="解答："></a>解答：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input_string = input(&quot;请输入一系列整数，用空格分隔：&quot;)</span><br><span class="line"></span><br><span class="line"># 切割</span><br><span class="line">try:</span><br><span class="line">    numbers = [int(num) for num in input_string.split()]</span><br><span class="line">except ValueError:</span><br><span class="line">    print(&quot;输入包含非整数，请确保所有输入都是整数。&quot;)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"># 初始化</span><br><span class="line">numlist = &#123;&#125;</span><br><span class="line"></span><br><span class="line"># 遍历</span><br><span class="line">for num in numbers:</span><br><span class="line">    if num in numlist:</span><br><span class="line">        numlist[num] += 1  </span><br><span class="line">    else:</span><br><span class="line">        numlist[num] = 1 </span><br><span class="line"></span><br><span class="line">print(numlist)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="2024-5-28"><a href="#2024-5-28" class="headerlink" title="2024.5.28"></a>2024.5.28</h1><h2 id="题目：寻找列表中的最大和最小元素"><a href="#题目：寻找列表中的最大和最小元素" class="headerlink" title="题目：寻找列表中的最大和最小元素"></a>题目：寻找列表中的最大和最小元素</h2><p>编写一个Python程序，要求用户输入一系列整数（用空格分隔）。然后程序会找到并输出这些整数中的最大值和最小值。</p>
<h3 id="解答：-3"><a href="#解答：-3" class="headerlink" title="解答："></a>解答：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 输入内容并判断输入是否合法</span><br><span class="line">while True:</span><br><span class="line">    # 用户输入</span><br><span class="line">    usr_input = input(&quot;请阁下输入一系列整数，并用空格隔开：&quot;)</span><br><span class="line">    try:</span><br><span class="line">    # 分割成列表，并转换为整数列表</span><br><span class="line">        num_list = [int(num) for num in usr_input.split()]</span><br><span class="line">        break</span><br><span class="line">    except ValueError:</span><br><span class="line">        print(&quot;错误！请阁下重新输入正确的整数并用空格隔开&quot;)</span><br><span class="line"></span><br><span class="line"># 寻找max和min</span><br><span class="line">max_num = max(num_list)</span><br><span class="line">min_num = min(num_list)</span><br><span class="line"></span><br><span class="line">#输入max和min</span><br><span class="line">print(&quot;最大值：&quot;, max_num)</span><br><span class="line">print(&quot;最小值：&quot;, min_num)</span><br></pre></td></tr></table></figure>
<h1 id="2024-5-30"><a href="#2024-5-30" class="headerlink" title="2024.5.30"></a>2024.5.30</h1><h2 id="判断字符串是否是回文"><a href="#判断字符串是否是回文" class="headerlink" title="判断字符串是否是回文"></a>判断字符串是否是回文</h2><p>编写一个Python程序，要求用户输入一个字符串，然后判断该字符串是否是回文。如果是回文，输出“是回文”；否则，输出“不是回文”。</p>
<p>回文是指正读和反读都相同的字符串，例如“madam”或“racecar”。</p>
<h3 id="解答：-4"><a href="#解答：-4" class="headerlink" title="解答："></a>解答：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 说明</span><br><span class="line">print(&quot;阁下您好，感谢阁下使用此代码判断字符串是否是回文，请根据系统提示，帮助您解决问题。&quot;)</span><br><span class="line">print(&quot;提示：回文是指正读和反读都相同的字符串，例如“madam”或“racecar”。&quot;)</span><br><span class="line"></span><br><span class="line">#body</span><br><span class="line">while True:</span><br><span class="line">    # 输入字符串</span><br><span class="line">    usr_input = input(&quot;请输入您需要判断是否为回文的字符串(或按q退出)：&quot;)</span><br><span class="line"></span><br><span class="line">    # 判断用户是否选择退出</span><br><span class="line">    if usr_input.lower() == &#x27;q&#x27;:</span><br><span class="line">        print(&quot;感谢使用，程序已退出。&quot;)</span><br><span class="line">        break</span><br><span class="line">    # 切片反转操作</span><br><span class="line">    reversed_string = usr_input[::-1]</span><br><span class="line"></span><br><span class="line">    # 判断是否是回文</span><br><span class="line">    if usr_input == reversed_string:</span><br><span class="line">        print(&quot;这是回文字符串&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;这不是回文字符串&quot;)</span><br></pre></td></tr></table></figure>
<h2 id="计算一个列表中的平均值"><a href="#计算一个列表中的平均值" class="headerlink" title="计算一个列表中的平均值"></a>计算一个列表中的平均值</h2><p>编写一个Python程序，要求用户输入一系列整数（用空格分隔），然后计算并输出这些整数的平均值。</p>
<h3 id="解答：-5"><a href="#解答：-5" class="headerlink" title="解答："></a>解答：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 说明</span><br><span class="line">print(&quot;感谢您的使用，这是用于计算列表中的平均值的代码，请根据系统提示进行操作&quot;)</span><br><span class="line"></span><br><span class="line"># 用户输入并判断输入的正确性</span><br><span class="line">while True:</span><br><span class="line">    # 用户输入</span><br><span class="line">    usr_input = input(&quot;请阁下输入一系列整数并用空格分隔(或按&#x27;q&#x27;退出)：&quot;)</span><br><span class="line"></span><br><span class="line">    # 判断用户是否选择退出</span><br><span class="line">    if usr_input.lower() == &#x27;q&#x27;:</span><br><span class="line">        print(&quot;感谢使用，程序已退出&quot;)</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">    # 判断输入是否正确</span><br><span class="line">    try:</span><br><span class="line">        # 分割列表，并转换为整数列表</span><br><span class="line">        num_list = [int(num) for num in usr_input.split()]</span><br><span class="line"></span><br><span class="line">        # 检查列表是否为空</span><br><span class="line">        if not num_list:</span><br><span class="line">            print(&quot;错误！列表为空，请重新输入整数。&quot;)</span><br><span class="line">            continue</span><br><span class="line"></span><br><span class="line">        # 计算平均值</span><br><span class="line">        total = 0 # 初始化</span><br><span class="line">        for num in num_list:    # 计算总和</span><br><span class="line">            total += num</span><br><span class="line"></span><br><span class="line">        # 计算平均值</span><br><span class="line">        num_count = len(num_list)   # 列出个数</span><br><span class="line"></span><br><span class="line">        # 算平均值</span><br><span class="line">        average_num = total / num_count</span><br><span class="line"></span><br><span class="line">        # 输出结果</span><br><span class="line">        print(&quot;平均值为：&quot;, average_num)</span><br><span class="line"></span><br><span class="line">    except ValueError:</span><br><span class="line">        print(&quot;错误！请阁下重新输入正确的整数并用空格隔开！&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="2024-6-1"><a href="#2024-6-1" class="headerlink" title="2024.6.1"></a>2024.6.1</h1><h2 id="题目：学生成绩管理系统"><a href="#题目：学生成绩管理系统" class="headerlink" title="题目：学生成绩管理系统"></a>题目：学生成绩管理系统</h2><p>编写一个Python程序，实现一个简单的学生成绩管理系统。该系统可以让用户输入多个学生的姓名和成绩，并计算每个学生的平均成绩。最终，输出所有学生的平均成绩。</p>
<h3 id="解答：-6"><a href="#解答：-6" class="headerlink" title="解答："></a>解答：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 存储学生成绩的空字典</span><br><span class="line">student_scores = &#123;&#125;</span><br><span class="line"></span><br><span class="line"># 判断用户输入及正确性</span><br><span class="line">while True:</span><br><span class="line">    # 用户输入</span><br><span class="line">    usr_input = input(&quot;要求用户输入学生姓名和成绩，格式为 姓名: 成绩1, 成绩2, 成绩3(或按&#x27;q&#x27;退出):&quot;)</span><br><span class="line"></span><br><span class="line">    # 判断是否选择退出</span><br><span class="line">    if usr_input.lower() == &#x27;q&#x27;:</span><br><span class="line">        print(&quot;感谢使用，已退出&quot;)</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">    # 分割输入数据为姓名和成绩部分</span><br><span class="line">    try:</span><br><span class="line">        name, scores_str = usr_input.split(&#x27;:&#x27;)</span><br><span class="line">    except ValueError:</span><br><span class="line">        print(&quot;输入格式错误，请按照格式：姓名: 成绩1, 成绩2, 成绩3&quot;)</span><br><span class="line">        continue</span><br><span class="line">    </span><br><span class="line">    # 分割成绩字符串，并转换为整数列表</span><br><span class="line">    try:</span><br><span class="line">        scores = [int(score.strip()) for score in scores_str.split(&#x27;,&#x27;)]</span><br><span class="line">    except ValueError:</span><br><span class="line">        print(&quot;成绩应为整数，请重新输入。&quot;)</span><br><span class="line">        continue</span><br><span class="line"></span><br><span class="line">    # 将姓名和成绩存储到字典中</span><br><span class="line">    student_scores[name] = scores</span><br><span class="line"></span><br><span class="line"># 计算并输出每个学生的平均成绩</span><br><span class="line">for name, scores in student_scores.items():</span><br><span class="line">    average_score = sum(scores) / len(scores)</span><br><span class="line">    print(f&quot;&#123;name&#125; 的平均成绩为 &#123;average_score:.2f&#125;&quot;)</span><br></pre></td></tr></table></figure>
<h1 id="2024-6-7"><a href="#2024-6-7" class="headerlink" title="2024.6.7"></a>2024.6.7</h1><h2 id="题目：统计字符串中各字符的出现次数"><a href="#题目：统计字符串中各字符的出现次数" class="headerlink" title="题目：统计字符串中各字符的出现次数"></a>题目：统计字符串中各字符的出现次数</h2><p>编写一个Python程序，要求用户输入一个字符串，统计并输出该字符串中每个字符的出现次数。</p>
<h3 id="解答：-7"><a href="#解答：-7" class="headerlink" title="解答："></a>解答：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 用户输入</span><br><span class="line">usr_input = input(&quot;请输入一个字符串：&quot;)</span><br><span class="line"></span><br><span class="line"># 初始化字典</span><br><span class="line">char_count = &#123;&#125;</span><br><span class="line"></span><br><span class="line"># 遍历输入</span><br><span class="line">for char in usr_input:</span><br><span class="line">    if char in char_count:</span><br><span class="line">        char_count[char] += 1</span><br><span class="line">    else:</span><br><span class="line">        char_count[char] = 1</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line">for char, count in char_count.items():</span><br><span class="line">    print(f&quot;&#123;char&#125;:&#123;char_count&#125;&quot;)</span><br></pre></td></tr></table></figure>
<h1 id="2024-6-8"><a href="#2024-6-8" class="headerlink" title="2024.6.8"></a>2024.6.8</h1><h2 id="题目：筛选出列表中的素数"><a href="#题目：筛选出列表中的素数" class="headerlink" title="题目：筛选出列表中的素数"></a>题目：筛选出列表中的素数</h2><p>编写一个Python程序，要求用户输入一系列整数（用空格分隔），然后从这些整数中筛选出所有的素数，并输出这些素数。</p>
<h3 id="解答：-8"><a href="#解答：-8" class="headerlink" title="解答："></a>解答：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 用户输入</span><br><span class="line">usr_input = input(&quot;请输入一系列整数（用空格分隔）：&quot;)</span><br><span class="line"></span><br><span class="line"># 定义素数的函数</span><br><span class="line">def Prime_num(n):</span><br><span class="line">    if n &gt; 1:</span><br><span class="line">        for i in range(2, int(n ** 0.5) + 1):</span><br><span class="line">            if n % i == 0:</span><br><span class="line">                return False</span><br><span class="line">        return True</span><br><span class="line">    else:</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line"># 切片</span><br><span class="line">numbers = [int(num) for num in usr_input.split()]</span><br><span class="line"></span><br><span class="line"># 初始化列表</span><br><span class="line">primes = []</span><br><span class="line"></span><br><span class="line"># 遍历整数列表，筛选出所有的素数</span><br><span class="line">for num in numbers:</span><br><span class="line">    if Prime_num(num):</span><br><span class="line">        primes.append(num)</span><br><span class="line"></span><br><span class="line"># 输出筛选出的素数</span><br><span class="line">print(&quot;素数有：&quot;, &#x27; &#x27;.join(map(str, primes)))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>代码</tag>
      </tags>
  </entry>
  <entry>
    <title>Verilog学习</title>
    <url>/2023/09/19/Verilog%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p><strong>Verilog学习</strong></p>
<h2 id="verilog-HDL-层次化设计"><a href="#verilog-HDL-层次化设计" class="headerlink" title="verilog HDL 层次化设计"></a>verilog HDL 层次化设计</h2><h3 id="模块和端口"><a href="#模块和端口" class="headerlink" title="模块和端口"></a>模块和端口</h3><ol>
<li>模块=模块名定义+端口描述+内部功能逻辑</li>
<li>逻辑功能描述：变量声明、数据流描述语句、门级实例化描述语句、行为描述语句、任务与函数。</li>
<li>关键词：<code>module</code>定义模块名字；<code>input</code>、<code>output</code>指定端口方向；<code>endmodule</code>结束模块描述。</li>
<li>模块定义格式：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module 模块名</span><br><span class="line">端口定义</span><br><span class="line">......</span><br><span class="line">unmodule</span><br></pre></td></tr></table></figure></li>
<li>端口定义：有两种格式<ul>
<li>普通风格 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module 模块名</span><br><span class="line">input [位宽-1: 0] 端口名1，端口名2  </span><br><span class="line">output [位宽-1: 0] 端口3 </span><br><span class="line">inout [位宽-1: 0]端口4</span><br></pre></td></tr></table></figure></li>
<li>ANSI C风格 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module 模块名</span><br><span class="line">( input [位宽-1: 0] 端口名1，端口名2  </span><br><span class="line">  output [位宽-1: 0] 端口3 </span><br><span class="line">  inout [位宽-1: 0]端口4</span><br><span class="line">  );</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>实例化：不允许嵌套，模块之间只能通过实例化</li>
</ol>
<h2 id="层次化设计思想"><a href="#层次化设计思想" class="headerlink" title="层次化设计思想"></a>层次化设计思想</h2><ul>
<li>自顶向下<br>类似于根据一张图纸造物</li>
<li>自底向上<br>类似于根据材料造物，可以是已知也可以是未知的</li>
</ul>
<h2 id="Testbench概念"><a href="#Testbench概念" class="headerlink" title="Testbench概念"></a>Testbench概念</h2><p>用于测试设计的电路的功能是否正常</p>
<h2 id="verilog-HDL基本语法"><a href="#verilog-HDL基本语法" class="headerlink" title="verilog HDL基本语法"></a>verilog HDL基本语法</h2><h3 id="词法约定"><a href="#词法约定" class="headerlink" title="词法约定"></a>词法约定</h3><ol>
<li>空白符：空格<code>\b</code>，制表<code>\t</code>和换行</li>
<li>注释：单行<code>//</code>，多行<code>*/.../*</code>(不允许嵌套)</li>
<li>操作符：单目操作符<code>~</code>，双目操作符<code>+</code>，三目操作符<code>?</code></li>
<li>标识符：<ul>
<li>第一个字符是字母或下划线</li>
<li>区分大小写</li>
<li>转义<code>\</code></li>
<li>空白符结束</li>
</ul>
</li>
<li>关键字：均为小写<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3>— 线网：除<code>tri</code>和<code>reg</code>所有网线类型不能存储数据值<br>— 变量：抽象的数据存储单元</li>
<li>逻辑值与常量</li>
</ol>
<ul>
<li>基本值：0/1真假，x未知，z高阻(不分大小写)</li>
<li>整数：二进制、十进制、十六进制、八进制  <pre><code>   格式：`[位宽]&#39;[进制][数值]`  
   负数：加负号
</code></pre></li>
<li>实数：十进制和科学计数法(可用e或E表示)</li>
</ul>
<ol>
<li>逻辑强度：supply最强，highz最弱</li>
</ol>
<ul>
<li>线网类型：<code>wire</code>和<code>tri</code>最常见<br> 格式：<code>wire [7:0] datain, dataoutt</code>(*两个8位的wire数据)【这是举例】</li>
<li>变量类型：<code>reg</code>类型、<code>integer</code>型、<code>real</code>型、<code>time</code>型</li>
<li>向量：位宽大于1</li>
<li>数组：数组中的每一个元素可以是标量也可以是向量</li>
<li>参数：<code>defparam语句</code>(同样不可嵌套)  </li>
</ul>
<ol>
<li>表达式</li>
</ol>
<ul>
<li>操作数</li>
<li>算术操作符：单双目操作数。单目<code>+ -</code>表正负，双目<code>* / + -</code>运算符号</li>
<li>逻辑操作符：逻辑与<code>&amp;&amp;</code>，逻辑或<code>||</code>，逻辑非<code>!</code></li>
<li>关系操作符：<code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code></li>
<li>相等操作符：逻辑相等<code>==</code>，逻辑不等<code>!=</code>，逻辑全等<code>===</code>，逻辑非全等<code>!==</code></li>
<li>按位操作符：反<code>~</code>，与<code>&amp;</code>，或<code>|</code>，异或<code>^</code>，同或<code>^~, ~^</code></li>
<li>缩减操作符：缩减与<code>&amp;</code>，缩减与非<code>-&amp;</code>，缩减或<code>|</code>，缩减或非<code>~|</code>，缩减异或<code>^</code>，缩减同或<code>~^, ^~</code></li>
<li>位移操作：右移<code>&gt;&gt;</code>，左移<code>&lt;&lt;</code>，算术左移<code>&lt;&lt;&lt;</code>，算术右移<code>&gt;&gt;&gt;</code></li>
<li>拼接操作符：格式<code>&#123;操作1，操作2，操作3，...，操作n&#125;</code></li>
<li>条件操作符：根据条件表达式的值从两个表达式中选择一个表达式作为输出结果，格式<code>条件表达式? 真表达式 ： 假表达式</code></li>
</ul>
<h2 id="Verilog-HDL行为描述"><a href="#Verilog-HDL行为描述" class="headerlink" title="Verilog HDL行为描述"></a>Verilog HDL行为描述</h2><h3 id="Verilog-HDL基本描述形式"><a href="#Verilog-HDL基本描述形式" class="headerlink" title="Verilog HDL基本描述形式"></a>Verilog HDL基本描述形式</h3><ol>
<li>数据流描述方法<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assing [延迟] wire类型 = 表达式</span><br></pre></td></tr></table></figure></li>
<li>行为描述方式<br>两种语句：initial和always<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">always @(事件控制列表) begin</span><br><span class="line">···</span><br><span class="line">end</span><br><span class="line">或</span><br><span class="line">intial begin</span><br><span class="line">···</span><br><span class="line">end</span><br></pre></td></tr></table></figure></li>
<li>层次化描述方式<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">模块名 实例名</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="结构化过程语句"><a href="#结构化过程语句" class="headerlink" title="结构化过程语句"></a>结构化过程语句</h3><p><strong>initial和always语句不能相互嵌套使用</strong></p>
<ol>
<li>initial语句<br>从仿真的0时刻开始，只执行一次。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg a, b, c; //initial中只有一条赋值语句</span><br><span class="line">initial</span><br><span class="line">   a = 1&#x27;b0; </span><br><span class="line">//若含多条赋值语句，需要begin end</span><br><span class="line">initial begin</span><br><span class="line">   b = 1&#x27;b0;</span><br><span class="line">   c = 1&#x27;b0;</span><br><span class="line">end</span><br></pre></td></tr></table></figure></li>
<li>always语句<br>从仿真的0时刻开始，会重新执行命令<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg a;</span><br><span class="line">initial a = 0;</span><br><span class="line">always #50 a =-a;</span><br><span class="line">//从0开始，每隔50个时间单位的反复操作</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="顺序块和并行块"><a href="#顺序块和并行块" class="headerlink" title="顺序块和并行块"></a>顺序块和并行块</h3><ol>
<li>顺序块：按书写顺讯依次执行</li>
<li>并行块：<code>fork</code>是同时开始</li>
<li>块语句的其他特点<ul>
<li>嵌套块</li>
<li>命名块</li>
</ul>
</li>
</ol>
<h3 id="过程赋值语句"><a href="#过程赋值语句" class="headerlink" title="过程赋值语句"></a>过程赋值语句</h3><ol>
<li>阻塞赋值语句<br>用<code>=</code>作为赋值符，按顺序执行<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg a, b;</span><br><span class="line">initial begin</span><br><span class="line">   a = 1&#x27;b0; </span><br><span class="line">   b = 1&#x27;b0;</span><br><span class="line">   #10 a = 1&#x27;b1; //阻塞赋值语句对a赋新值，a变为1后才继续执行后面的命令</span><br><span class="line">       b = a;</span><br><span class="line">end</span><br></pre></td></tr></table></figure></li>
<li>非阻塞赋值语句<br>用<code>&lt;=</code>作为赋值符，不会阻塞同一个块语句中的其他语句的执行<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg a, b;</span><br><span class="line">initial begin</span><br><span class="line">   a = 1&#x27;b0;</span><br><span class="line">   b = 1&#x27;b0;</span><br><span class="line">   #10 a &lt;= 1&#x27;b1; //用非阻塞赋值语句赋值，赋值还未完成先完成后面的语句</span><br><span class="line">       b &lt;= a; //由于a的赋值未完成，所以b的值还是0</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><p>有三种情况，<code>if</code>表达式，<code>if-else</code>表达式，<code>if-else if</code>表达式。<br><em>注意</em>，这里容易弄混，一定要搞清楚。</p>
<h3 id="多路分支语句"><a href="#多路分支语句" class="headerlink" title="多路分支语句"></a>多路分支语句</h3><p>当分支特别多时，<code>if</code> <code>else</code>语句非常不好用，就可以使用<code>case</code>语句<br><code>case</code>语句的关键词：<code>case</code> <code>default</code> <code>endcase</code> 格式如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">case(表达式)</span><br><span class="line">   分支表达式1: 语句1</span><br><span class="line">   分支表达式2: 语句2</span><br><span class="line">   ···</span><br><span class="line">   default: 默认语句</span><br><span class="line">   endcase</span><br></pre></td></tr></table></figure></p>
<h3 id="条件语句和多路分支语句的比较"><a href="#条件语句和多路分支语句的比较" class="headerlink" title="条件语句和多路分支语句的比较"></a>条件语句和多路分支语句的比较</h3><p><code>if...else</code>语句有优先级，而<code>case</code>语句没有，是并行的关系。</p>
<h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><ol>
<li>while循环<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while(条件表达式)</span><br><span class="line">   语句：</span><br></pre></td></tr></table></figure>
当表示式为真时，则循环执行里面的雨具；如果为假，中止循环并跳出while。如果while中表达式的值为x或z时，当作假处理。</li>
<li>for循环<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(循环变量初值;循环结束条件;循环变量增值)</span><br></pre></td></tr></table></figure>
在for中，C语言有i++，而verilog没有，改成i=i+1</li>
<li>repeat循环<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repeat(循环次数表达式)</span><br></pre></td></tr></table></figure></li>
<li>forever循环</li>
</ol>
<h3 id="时序控制"><a href="#时序控制" class="headerlink" title="时序控制"></a>时序控制</h3><ol>
<li>延迟控制<br>分为常规和内嵌，两者区别为：常规是整个语句执行后，在推迟的时间后，赋值语句开始计算；内嵌是开始执行时刻就立即计算表达式右边的值，此值会一直保持至延迟结束。</li>
</ol>
<ul>
<li>常规延迟<br><code># [延迟值] 语句</code></li>
<li>内嵌延迟<br><code>语句 #[延迟值]</code></li>
</ul>
<ol>
<li>事件控制<br>发生某个事件(变量、线网信号或表达式的值发生变化)之后，整个逻辑发生变化</li>
</ol>
<ul>
<li>边沿敏感事件控制<br>用边缘敏感符号<code>@</code>，格式为<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ 事件</span><br><span class="line">    语句;</span><br></pre></td></tr></table></figure>
这里有个<strong>关键字:posedge(上升沿跳变)/negedge(下降沿跳变)</strong> 记住即可<br>如果出现了多个敏感事件，则用<code>or</code>或者<code>,</code>即可</li>
<li>电平敏感事件控制<br>以信号值变化的边沿为标志的，即一定要达到指定信号的某个值的变化边沿才会触发执行，关键字为<code>wait</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wait(事件) 语句;</span><br></pre></td></tr></table></figure>
当事件为真时，后面的语句才会执行</li>
<li>时序控制语句在综合代码中的应用<br>在进行电路综合时，延迟控制语句会被综合工具自动忽略，当作无延迟处理</li>
</ul>
<h2 id="组合逻辑建模"><a href="#组合逻辑建模" class="headerlink" title="组合逻辑建模"></a>组合逻辑建模</h2><h3 id="数字电路建模方式"><a href="#数字电路建模方式" class="headerlink" title="数字电路建模方式"></a>数字电路建模方式</h3><p>电路与代码的一一对应关系</p>
<h3 id="组合逻辑的门级描述"><a href="#组合逻辑的门级描述" class="headerlink" title="组合逻辑的门级描述"></a>组合逻辑的门级描述</h3><p>与门(and)、与非门(nand)、或门(or)、或非门(nor)、异或门(xor)、同或门(xnor)、缓冲器(buf)、非门(not)、三台缓冲器控制信号低电平有效(bufif0)、三台缓冲器控制信号高电平有效(bufif1)、三态非门控制信号低电平有效(notif0)、三态非门控制信号高电平有效(notif1)</p>
<h3 id="组合逻辑的数据流描述"><a href="#组合逻辑的数据流描述" class="headerlink" title="组合逻辑的数据流描述"></a>组合逻辑的数据流描述</h3><ol>
<li>连续赋值语句<br><code>assign[延迟]wire型变量=表达式;</code></li>
</ol>
<ol>
<li>数据流描述<br>利用数据流描述可以很方便的描述一个加法器等，用符号就可以了，比如<code>+</code> <code>*</code>等</li>
</ol>
<h3 id="组合逻辑的行为描述"><a href="#组合逻辑的行为描述" class="headerlink" title="组合逻辑的行为描述"></a>组合逻辑的行为描述</h3><h3 id="组合逻辑建模实例"><a href="#组合逻辑建模实例" class="headerlink" title="组合逻辑建模实例"></a>组合逻辑建模实例</h3><ol>
<li>比较器</li>
<li>译码器和编码器</li>
</ol>
<h2 id="时序逻辑电路"><a href="#时序逻辑电路" class="headerlink" title="时序逻辑电路"></a>时序逻辑电路</h2><h3 id="时序逻辑建模概述"><a href="#时序逻辑建模概述" class="headerlink" title="时序逻辑建模概述"></a>时序逻辑建模概述</h3><p>时序逻辑电路指的是在verilog HDL所描述的电路中，包含一个或多个存储单元。这些存储单元可以是边沿触发的寄存器，或者是电平触发的锁存器。由于引入了存储单元，时序逻辑电路具有了“记忆”功能，可以记录当前时刻之前的输入激励情况及电路状态。</p>
<h3 id="寄存器和锁存器设计"><a href="#寄存器和锁存器设计" class="headerlink" title="寄存器和锁存器设计"></a>寄存器和锁存器设计</h3><ol>
<li>寄存器实例<br>在<code>always</code>后面的敏感列表中加入边沿敏感的信号，即可设计出一个简单的寄存器。<code>posedge</code>是在时钟的上升沿触发并采集数据端口的值；<code>negedge</code>则在下降沿触发。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module dff</span><br><span class="line">(</span><br><span class="line">   input i_clk,</span><br><span class="line">   input i_din,</span><br><span class="line">   output reg o_dout</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">always@(posedge i_clk) //在always语句的敏感列表@()中加入边沿敏感的时钟信号i_clk</span><br><span class="line">  o_dout &lt;= i_din;</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>
<ol>
<li>锁存器的设计实例<br>用verilog描述一个的锁存器，该锁存器在控制信号i_en为高电平时开启，为低电平时锁存器当前值<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module latch</span><br><span class="line">(</span><br><span class="line">   input i_en,</span><br><span class="line">   input i_din,</span><br><span class="line">   output reg o_dout</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">always@(i_den or i_en) //敏感列表中没有边沿触发的信号</span><br><span class="line">  if(i_en)</span><br><span class="line">    o_dout &lt;= i_din;</span><br><span class="line"></span><br><span class="line">endmodule </span><br></pre></td></tr></table></figure>
<h3 id="寄存器和锁存器的推断"><a href="#寄存器和锁存器的推断" class="headerlink" title="寄存器和锁存器的推断"></a>寄存器和锁存器的推断</h3></li>
<li>寄存器的推断</li>
</ol>
<ul>
<li>寄存器是一种时序元件，用于存储数据，并且在时钟信号的上升沿或下降沿触发时更新数据。</li>
<li>寄存器在时钟边沿触发时，将其输入数据传递到输出，具有确定的时序行为。</li>
<li>在Verilog中，通常使用触发器（Flip-Flops）来实现寄存器。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//举例说明</span><br><span class="line">module DFF (</span><br><span class="line">    input wire D,    // 数据输入</span><br><span class="line">    input wire CLK,  // 时钟信号</span><br><span class="line">    output wire Q    // 数据输出</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">always @(posedge CLK) begin</span><br><span class="line">    Q &lt;= D;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure></li>
</ul>
<ol>
<li>锁存器的推断</li>
</ol>
<ul>
<li>锁存器是一种组合逻辑元件，它不需要时钟信号，而是根据输入信号的变化实时更新输出。</li>
<li>锁存器不是时序元件，通常应该避免在数字电路中使用锁存器，因为它们可能会导致不稳定的行为和时序问题。</li>
<li>锁存器可能会导致冒险条件，因此在设计中应该谨慎使用。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//举例说明</span><br><span class="line">module SRLatch (</span><br><span class="line">    input wire S,  // 设置输入</span><br><span class="line">    input wire R,  // 复位输入</span><br><span class="line">    output wire Q  // 数据输出</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">assign Q = S &amp; ~R;</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>
<h3 id="存储器的设计与建模"><a href="#存储器的设计与建模" class="headerlink" title="存储器的设计与建模"></a>存储器的设计与建模</h3></li>
</ul>
<ol>
<li>ROM建模<br>ROM是只读存储器<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//变量z以数组的方式描述了一个ROM</span><br><span class="line">//由于使用了inital语句，因此该代码只能适用于仿真，不能综合</span><br><span class="line">module rom_sim</span><br><span class="line">(</span><br><span class="line">   input [2:0] i_sel,</span><br><span class="line">   output [3:0] o_dat</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">   reg [3:0] rom [0:7]; //通过数组声明存储器变量</span><br><span class="line"></span><br><span class="line">      inital begin //利用inital语句为ROM赋值</span><br><span class="line">      rom[0] = 4&#x27;b1001;</span><br><span class="line">      rom[1] = 4&#x27;b1011;</span><br><span class="line">      rom[2] = 4&#x27;b0010;</span><br><span class="line">      rom[3] = 4&#x27;b0011;</span><br><span class="line">      rom[4] = 4&#x27;b1110;</span><br><span class="line">      rom[5] = 4&#x27;b0000;</span><br><span class="line">      rom[6] = 4&#x27;b0000;</span><br><span class="line">      rom[7] = 4&#x27;b0000;</span><br><span class="line">   end</span><br><span class="line"></span><br><span class="line">   assign o_dat = rom[i_sel];</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure></li>
<li>RAM建模<br>一个电平变化触发的16位宽RAM模型通常是基于时序逻辑的，使用触发器来存储数据。以下是一个简单的电平变化触发的16位宽RAM模型示例，使用2个16位触发器作为存储元件：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module LevelSensitiveRAM16 (</span><br><span class="line">    input wire [3:0] address,       // 4位地址输入</span><br><span class="line">    input wire [15:0] data_in,      // 16位数据输入</span><br><span class="line">    input wire write_enable,       // 写使能信号</span><br><span class="line">    input wire read_enable,        // 读使能信号</span><br><span class="line">    output wire [15:0] data_out    // 16位数据输出</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">reg [15:0] memory [0:15];  // 16个16位触发器，模拟RAM的存储单元</span><br><span class="line"></span><br><span class="line">always @(posedge write_enable or posedge read_enable) begin</span><br><span class="line">    if (write_enable) begin</span><br><span class="line">        // 写操作：将输入数据写入存储器指定地址</span><br><span class="line">        memory[address] &lt;= data_in;</span><br><span class="line">    end</span><br><span class="line">    if (read_enable) begin</span><br><span class="line">        // 读操作：从存储器指定地址读取数据</span><br><span class="line">        data_out &lt;= memory[address];</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>
<h3 id="同步有限状态机"><a href="#同步有限状态机" class="headerlink" title="同步有限状态机"></a>同步有限状态机</h3>同步有限状态机（Synchronous Finite State Machine，SFSM）是一种在特定时钟信号下运行的状态机，其中状态的转换和输出的更新都与时钟信号同步。SFSM 包括状态寄存器、组合逻辑块以及时钟信号。</li>
</ol>
<p>以下是一个简单的 2 状态同步有限状态机的示例，其状态转换和输出更新是同步的：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module SynchronousFSM (</span><br><span class="line">    input wire clk,          // 时钟信号</span><br><span class="line">    input wire rst,          // 复位信号</span><br><span class="line">    output wire [1:0] state, // 2位状态输出</span><br><span class="line">    output wire output       // 输出信号</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">reg [1:0] current_state;   // 当前状态寄存器</span><br><span class="line"></span><br><span class="line">always @(posedge clk or posedge rst) begin</span><br><span class="line">    if (rst) begin</span><br><span class="line">        // 复位操作</span><br><span class="line">        current_state &lt;= 2&#x27;b00;  // 将状态初始化为00</span><br><span class="line">    end else begin</span><br><span class="line">        // 状态转换逻辑</span><br><span class="line">        case (current_state)</span><br><span class="line">            2&#x27;b00: current_state &lt;= 2&#x27;b01;  // 从00转换到01</span><br><span class="line">            2&#x27;b01: current_state &lt;= 2&#x27;b10;  // 从01转换到10</span><br><span class="line">            2&#x27;b10: current_state &lt;= 2&#x27;b00;  // 从10转换到00</span><br><span class="line">        endcase</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">assign state = current_state;   // 输出当前状态</span><br><span class="line"></span><br><span class="line">always @(posedge clk) begin</span><br><span class="line">    // 输出逻辑</span><br><span class="line">    case (current_state)</span><br><span class="line">        2&#x27;b00: output &lt;= 1&#x27;b0;  // 当前状态为00时输出0</span><br><span class="line">        default: output &lt;= 1&#x27;b1;  // 其他状态时输出1</span><br><span class="line">    endcase</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure></p>
<h3 id="时序逻辑建模实例"><a href="#时序逻辑建模实例" class="headerlink" title="时序逻辑建模实例"></a>时序逻辑建模实例</h3><ol>
<li>计数器  </li>
<li>串并/并串转换器<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module p2s(clk,en,rsy,pin,sout)；</span><br><span class="line">input clk,en,rst;</span><br><span class="line">input [7:0] pin;</span><br><span class="line">output sout;</span><br><span class="line">output end; #并转串传输结束</span><br><span class="line"></span><br><span class="line">reg[2:0] cnt;</span><br><span class="line">reg[7:0] data;</span><br><span class="line"></span><br><span class="line">always@(posedge clk or posedge rst)</span><br><span class="line">  if(rst)</span><br><span class="line">    sout &lt;= 1&#x27;b0;</span><br><span class="line">    cnt &lt;= 3&#x27;b0;</span><br><span class="line">  end</span><br><span class="line">  else if(en) begin</span><br><span class="line">    cnt &lt;= cnt+1&#x27;b1;</span><br><span class="line">    sout &lt;= data[0];</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">always@(posedge clk or posedge rst)</span><br><span class="line">  if(rst)</span><br><span class="line">    data &lt;= 8&#x27;b0;</span><br><span class="line">  else</span><br><span class="line">    if(cnt==3&#x27;b0)</span><br><span class="line">      data &lt;= pin;</span><br><span class="line">    else</span><br><span class="line">      data &lt;= &#123;1&#x27;b0,data[7:1]&#125;;</span><br><span class="line"></span><br><span class="line">always@(posedge clk or posedge rst)</span><br><span class="line">  if(rst)</span><br><span class="line">    end &lt;= 1&#x27;b0;</span><br><span class="line">  else</span><br><span class="line">    end &lt;= (cnt==3&#x27;b111);</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure></li>
<li>时钟分频电路</li>
</ol>
<h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><p>5.4<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module 8bit(</span><br><span class="line">   input wire clk,</span><br><span class="line">   input wire rst,</span><br><span class="line">   input wire [7:0] data_in,</span><br><span class="line">   output wire [7:0] data_out</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">   reg [7:0] reg_data;</span><br><span class="line"></span><br><span class="line">   always @(nesedge clk or posedge rst)begin</span><br><span class="line">     if (rst) </span><br><span class="line">        reg_data &lt;= 8&#x27;b0;</span><br><span class="line">       else</span><br><span class="line">        reg_data &lt;= date_in;</span><br><span class="line">        end</span><br><span class="line">   end</span><br><span class="line"></span><br><span class="line">   assign data_out = reg_data;</span><br><span class="line"></span><br><span class="line">endmodule </span><br></pre></td></tr></table></figure><br>5.6<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module 32_RAM(clk,wr,addr,rdata,wdata);</span><br><span class="line">   input clk,wr;</span><br><span class="line">   input [31:0] wdata;</span><br><span class="line">   input [14:0] addr;</span><br><span class="line">   output [31:0] rdata;</span><br><span class="line"></span><br><span class="line">   reg [31:0] ram[32767:0]</span><br><span class="line"></span><br><span class="line">   always@(posedge clk)</span><br><span class="line">      if(wr)</span><br><span class="line">         ramp[addr] &lt;= wdata;</span><br><span class="line">      else</span><br><span class="line"></span><br><span class="line">   assign rdata =ram [addr];</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><br>5.7<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module 32_RAM(clk,wr,addr,data);</span><br><span class="line">   input clk,wr;</span><br><span class="line">   inout [31:0] wdata;</span><br><span class="line">   inout [14:0] addr;</span><br><span class="line"></span><br><span class="line">   reg [31:0] ram[32767:0]</span><br><span class="line"></span><br><span class="line">   always@(posedge clk)</span><br><span class="line">      if(wr)</span><br><span class="line">         ramp[addr] &lt;= wdata;</span><br><span class="line">      else</span><br><span class="line">         data ram[addr]</span><br><span class="line">   assign rdata =ram [addr];</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><br>5.11<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module fsm(clk,rst_n,sel.hready,write,burst,resp_ok)</span><br><span class="line">   input clk,rst_n,sel,hready,write,burst,resp_ok;</span><br><span class="line">   parameter Reset=3&#x27;b000;</span><br><span class="line">   parmeter Idle=3&#x27;b001;</span><br><span class="line">   parmeter Addr=3&#x27;b010;</span><br><span class="line">   parmeter Write=3&#x27;b011;</span><br><span class="line">   parmeter Read=3&#x27;b100;</span><br><span class="line">   parmeter BurstWrite=3&#x27;b101;</span><br><span class="line">   parmeter BurstRead=3&#x27;b110;</span><br><span class="line">   parmeter Resp=3&#x27;b111;</span><br><span class="line"></span><br><span class="line">   reg [2:0] next_state.current_state;</span><br><span class="line">   always@(posedge clk or negedge rst_n)</span><br><span class="line">      if(!rst_n)</span><br><span class="line">         current_state &lt;= Reset;</span><br><span class="line">      else</span><br><span class="line">         current_state &lt;= next_state;</span><br><span class="line"></span><br><span class="line">   always@(rst_n or sel or hready or wirte orburst or resp_ok)</span><br><span class="line">      case(current_state)</span><br><span class="line">         Reset: if(rst_n) next_state =Idle;</span><br><span class="line">         Idle: if(sel&amp;&amp;hready) next_state = Addr;</span><br><span class="line">         Addr: if(write&amp;&amp;burst) next_state = Burstread;</span><br><span class="line">            else if(!write&amp;&amp;burst) next_state = burstread;</span><br><span class="line">            else if(!write&amp;&amp;burst) next_state = Read;</span><br><span class="line">            else next_state = Write;</span><br><span class="line">            ......</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure></p>
<h2 id="行为级仿真模型建模"><a href="#行为级仿真模型建模" class="headerlink" title="行为级仿真模型建模"></a>行为级仿真模型建模</h2><p>组合逻辑和时序逻辑建模可以通过<strong>门级描述</strong>、<strong>数据流描述</strong>或<strong>行为描述</strong>来实现，用数据流或行为级语法进行可综合的电路描述，被称为RTL描述，即寄存器传输级描述。而利用门级语法进行描述的，通常称为结构级描述或层次化描述。</p>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>verilog提供的时序控制语句主要有3种：延迟控制语句，事件控制语句和条件等待语句。</p>
<h3 id="仿真时间和时序控制"><a href="#仿真时间和时序控制" class="headerlink" title="仿真时间和时序控制"></a>仿真时间和时序控制</h3><p>事件控制语句指利用语法@()进行描述，@后面的括号里包含需要的语句</p>
<h3 id="仿真模型建模实例"><a href="#仿真模型建模实例" class="headerlink" title="仿真模型建模实例"></a>仿真模型建模实例</h3><ol>
<li><p>时钟发生器</p>
</li>
<li><p>简单的仿真环境</p>
</li>
<li><p>从文件读取激励</p>
</li>
<li><p>输出结果监控<br>当调用<code>$monitor</code>任务时，参数列表中指定的变量都将被仿真器控制。</p>
</li>
<li><p>总线功能模型<br>总线功能模型(BFM)通常是某个总线主设备的接口电路模型<br>SoC芯片指在单个芯片上集成一个完整的数字电路系统</p>
</li>
</ol>
<h2 id="各层次verilog-HDL描述形式与电路建模"><a href="#各层次verilog-HDL描述形式与电路建模" class="headerlink" title="各层次verilog HDL描述形式与电路建模"></a>各层次verilog HDL描述形式与电路建模</h2><h3 id="基本的数字单路单元模块"><a href="#基本的数字单路单元模块" class="headerlink" title="基本的数字单路单元模块"></a>基本的数字单路单元模块</h3><h3 id="各抽象层次的verilog-HDL描述形式"><a href="#各抽象层次的verilog-HDL描述形式" class="headerlink" title="各抽象层次的verilog HDL描述形式"></a>各抽象层次的verilog HDL描述形式</h3><p>verilog HDL的描述形式可概括分为：<br>门级描述(或称层次化描述)：<code>and nl(out, opa, opb);</code><br>数据流描述：<code>assign out=opa&amp;opb;</code><br>行为描述：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">always@(opa or opb)begin</span><br><span class="line">   out=opa&amp;opb;</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p>
<ol>
<li>利用各层次描述进行组合逻辑建模<br>数据流转换为行为描述的步骤  <ul>
<li>将数据流描述中连续赋值语句左边的变量定义为 reg 类型；</li>
<li>利用 always 模块描述组合逻辑，将连续赋值语句等号右边的所有信号都加到 always语句后面的变量敏感列表中，且所有信号都是电平敏感的；</li>
<li>在 always 模块中利用阻塞赋值语句对左边变量进行赋值，赋值语句等号右边的表达式与连续赋值语句右手边的表达相同。</li>
</ul>
</li>
<li>利用各层次描述进行时序逻辑建模</li>
<li>利用各层次描述进行行为仿真逻辑建模</li>
</ol>
<h2 id="任务与函数"><a href="#任务与函数" class="headerlink" title="任务与函数"></a>任务与函数</h2><h3 id="任务语句说明"><a href="#任务语句说明" class="headerlink" title="任务语句说明"></a>任务语句说明</h3><p>语法定义：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">task 任务名;</span><br><span class="line">   端口声明和变量定义；</span><br><span class="line">   一个或多个过程语句；</span><br><span class="line">endtask</span><br></pre></td></tr></table></figure></p>
<p>任务的调用语法：<code>任务名 (参数1, 参数2, 参数3, ...);</code></p>
<p>$time 系统函数将返回当前仿真时间</p>
<h3 id="任务和函数的联系和区别"><a href="#任务和函数的联系和区别" class="headerlink" title="任务和函数的联系和区别"></a>任务和函数的联系和区别</h3><ol>
<li>函数不能包含时序控制语句，如@()、#10 等；</li>
<li>在函数中不能调用任务，而任务可以调用其他任务和函数；</li>
<li>函数必须包含至少一个端口；</li>
<li>函数必须返回一个值，而任务不能返回值。</li>
</ol>
<h3 id="monitor任务"><a href="#monitor任务" class="headerlink" title="$monitor任务"></a>$monitor任务</h3><p>$monitor任务可以用来监控并打印任何指定的变量或表达式</p>
<h2 id="编译预处理"><a href="#编译预处理" class="headerlink" title="编译预处理"></a>编译预处理</h2><p>编译指令实现的<strong>编程预处理</strong>功能</p>
<h3 id="‘define-‘undef"><a href="#‘define-‘undef" class="headerlink" title="‘define, ‘undef"></a>‘define, ‘undef</h3><p>‘define指令用于定义文本替换；<br>‘undef指令则是取消前面定义的宏</p>
<h3 id="‘ifdef-‘else-‘elsif-‘endif-‘ifndef"><a href="#‘ifdef-‘else-‘elsif-‘endif-‘ifndef" class="headerlink" title="‘ifdef, ‘else, ‘elsif, ‘endif, ‘ifndef"></a>‘ifdef, ‘else, ‘elsif, ‘endif, ‘ifndef</h3><p>工程师会根据某些条件选择性地编译某部分代码，同时选择性地忽略掉一些代码，而实现这样功能的编程指令就是条件编译指令。</p>
<h2 id="verilog-HDL设计与综合中的陷阱"><a href="#verilog-HDL设计与综合中的陷阱" class="headerlink" title="verilog HDL设计与综合中的陷阱"></a>verilog HDL设计与综合中的陷阱</h2><h3 id="阻塞语句和非阻塞语句"><a href="#阻塞语句和非阻塞语句" class="headerlink" title="阻塞语句和非阻塞语句"></a>阻塞语句和非阻塞语句</h3><ol>
<li><p>阻塞语句<br>阻塞语句用操作符号 = 进行连接，起基本语法格式为<br><code>寄存器变量(reg) = 表达式/变量</code></p>
<p>阻塞语句的含义：</p>
<ul>
<li>在多个阻塞语句顺序出现，出现的语句会完全阻塞后面的动作，直到前面的语句被执行结束，即执行的顺序性；</li>
<li>在赋值钱不能插入任何动作</li>
</ul>
</li>
<li><p>非阻塞语句<br>非阻塞语句用操作符号 &lt;= 进行连接，起基本语法格式为<br><code>寄存器变量(reg) &lt;= 表达式/变量</code>  </p>
</li>
</ol>
<h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><ol>
<li>当描述时序逻辑时，用非阻塞语句；</li>
<li>当描述组合逻辑时，用阻塞语句；</li>
<li>当在一个always模块中同时描述组合逻辑和时序逻辑时用非阻塞语句；</li>
<li>在同一个always模块中不要混合使用阻塞和非阻塞语句。</li>
</ol>
<h3 id="锁存器的产生与危害"><a href="#锁存器的产生与危害" class="headerlink" title="锁存器的产生与危害"></a>锁存器的产生与危害</h3><p>无意识锁存器产生的主要原因有两个：  </p>
<ul>
<li>在设计组合逻辑中使用不完整的条件判断语句，即有if没有else，或是在设计组合逻辑中使用不完整的case语句；</li>
<li>设计中使用到了组合逻辑反馈等异步逻辑。</li>
</ul>
<h3 id="组合逻辑反馈"><a href="#组合逻辑反馈" class="headerlink" title="组合逻辑反馈"></a>组合逻辑反馈</h3><p>规则：  </p>
<ol>
<li>当描述组合逻辑时，禁止使用组合逻辑反馈；</li>
<li>当需要描述反馈环路时，必须使用边沿触发。</li>
</ol>
<h3 id="复位电路设计问题与改进"><a href="#复位电路设计问题与改进" class="headerlink" title="复位电路设计问题与改进"></a>复位电路设计问题与改进</h3><ol>
<li><p>同步复位电路<br>同步复位的好处：</p>
<ul>
<li>保证整个系统是一个完全同步的系统；</li>
<li>复位信号只在时钟的有效边沿处才能复位寄存器，在一定程度上，滤除了复位信号上的毛刺；</li>
<li>在某些设计中，复位信号由一系列条件产生，这时同步复位是一种有效的方法，因为同步复位能够滤除组合逻辑在时钟信号之间的毛刺；</li>
</ul>
<p>同步复位的坏处：</p>
<ul>
<li>同步复位需要时钟参与，复位信号有效期间如果没有工作时钟，则不能复位；</li>
<li>同步复位增加了组合逻辑的时延，降低了设计的速度。</li>
</ul>
</li>
<li><p>异步复位电路<br>异步复位的好处：</p>
<ul>
<li>直接利用内部寄存器的硬复位引脚来复位寄存器；</li>
<li>复位信号不再参与到组合逻辑电路中，不影响逻辑的速度；</li>
<li>不需要时钟参与。</li>
</ul>
<p>异步复位的坏处：</p>
<ul>
<li>复位信号上的毛刺很容易导致系统的异常复位；</li>
<li>异步复位带来的最大问题就是异步，无论是寄存器复位还是复位的释放都是异步的。异步复位阶段一般没有问题，问题出在复位信号的释放阶段。如果复位信号正好在时钟沿附近释放，寄存器的输出将出现亚稳态。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>代码</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫</title>
    <url>/2024/01/26/Python%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>由于是自学的，学的比较杂，看的书本也不一样，没有系统的学习</p>
<h1 id="静态网页爬取"><a href="#静态网页爬取" class="headerlink" title="静态网页爬取"></a>静态网页爬取</h1><h2 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h2><p>利用代码<code>requests.get(URL)</code>可以获取URL的内容</p>
<h1 id="动态网页爬取"><a href="#动态网页爬取" class="headerlink" title="动态网页爬取"></a>动态网页爬取</h1><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><h3 id="初步实践"><a href="#初步实践" class="headerlink" title="初步实践"></a>初步实践</h3><ol>
<li><p>将豆瓣top250的电影爬出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line"># 如果没有headers就会报418错误，418错误就是只想服务浏览器用户，所以用headers伪装成浏览器用户</span><br><span class="line">headers = &#123;</span><br><span class="line">    &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36&quot;</span><br><span class="line">&#125;</span><br><span class="line">for start_num in range(0, 250, 25):         # 翻页</span><br><span class="line">    response = requests.get(f&quot;https://movie.douban.com/top250?start=&#123;start_num&#125;&quot;, headers=headers)</span><br><span class="line">    html = response.text</span><br><span class="line">    soup = BeautifulSoup(html, &quot;html.parser&quot;)</span><br><span class="line">    all_titles = soup.findAll(&quot;span&quot;, attrs=&#123;&quot;class&quot;: &quot;title&quot;&#125;)</span><br><span class="line">    for title in all_titles:</span><br><span class="line">        title_string = title.string</span><br><span class="line">        if &quot;/&quot; not in title_string:</span><br><span class="line">            print(title_string)</span><br></pre></td></tr></table></figure>
</li>
<li><p>用requests爬取博客信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">r = requests.get(&#x27;https://github.com/HauUhang&#x27;) #发送请求</span><br><span class="line">m = r.status_code #返回码</span><br><span class="line">print(m) #显示码(结果为200成功)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="题目练习"><a href="#题目练习" class="headerlink" title="题目练习"></a>题目练习</h1><h2 id="静态网络爬取"><a href="#静态网络爬取" class="headerlink" title="静态网络爬取"></a>静态网络爬取</h2><ol>
<li><p>编写一个Python程序，从一个网站上爬取所有图片，并将它们保存到本地文件夹中。</p>
</li>
<li><p>设计一个爬虫，从一个电影网站上获取电影的名称、评分和简介信息，并将这些信息保存到一个CSV文件中。</p>
</li>
<li><p>创建一个爬虫，从某个新闻网站上获取最新的新闻标题和链接，并将它们打印出来。</p>
</li>
<li><p>编写一个程序，从某个在线书店上爬取书籍的名称、作者和价格，并将这些信息保存到一个Excel文件中。</p>
</li>
<li><p>设计一个爬虫，从一个论坛或社交网站上获取用户的用户名、发帖数和注册时间，并将这些信息保存到一个数据库中。</p>
</li>
<li><p>创建一个爬虫，从某个网站上获取商品的名称、价格和销售数量，并将这些信息保存到一个JSON文件中。</p>
</li>
<li><p>编写一个程序，从一个博客网站上爬取文章的标题、发布日期和内容，并将这些信息保存到一个文本文件中。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>git学习</title>
    <url>/2023/12/16/git%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="git日常使用常用命令"><a href="#git日常使用常用命令" class="headerlink" title="git日常使用常用命令"></a>git日常使用常用命令</h1><h3 id="github仓库git到本地，更新并上传"><a href="#github仓库git到本地，更新并上传" class="headerlink" title="github仓库git到本地，更新并上传"></a>github仓库git到本地，更新并上传</h3><ol>
<li>新建一个仓库</li>
<li>将仓库clone至本地任意位置，代码如下：(后面的地址可在GitHub上复制)<br> <code>git clone git@github.com:用户名/仓库名.git</code></li>
<li>将代码放入该文件/更新代码</li>
<li>使用以下命令： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m&quot;注释内容&quot;</span><br><span class="line">git push https://github.com/用户名/仓库名.git</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="git学习-书"><a href="#git学习-书" class="headerlink" title="git学习(书)"></a>git学习(书)</h1><h2 id="第I章-git是什么"><a href="#第I章-git是什么" class="headerlink" title="第I章 git是什么"></a>第I章 git是什么</h2><h3 id="git能解决什么？"><a href="#git能解决什么？" class="headerlink" title="git能解决什么？"></a>git能解决什么？</h3><p>git，是版本管理系统(时光机)  </p>
<ul>
<li>可以回到过去的状态</li>
<li>对于同一个文件可以多人协助修改</li>
<li>能记录修改源代码的原因</li>
</ul>
<h3 id="作为交流场所的GitHub和Bitbucket"><a href="#作为交流场所的GitHub和Bitbucket" class="headerlink" title="作为交流场所的GitHub和Bitbucket"></a>作为交流场所的GitHub和Bitbucket</h3><ul>
<li>相互之间检查代码</li>
<li>讨论前端样式和功能的实现</li>
<li>共享设计前后过程，相互提意见</li>
</ul>
<h2 id="第II章-我独自学习"><a href="#第II章-我独自学习" class="headerlink" title="第II章 我独自学习"></a>第II章 我独自学习</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>下载SourceTree</p>
<h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>正常操作</p>
<h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><ol>
<li>添加一个TXT或是其他的，sourcetree都会感觉到</li>
<li>点击“暂存所有”</li>
<li>提交</li>
<li>继续积累历史记录(先暂存再提交)</li>
<li>记得添加注释</li>
</ol>
<h3 id="用checkout移动提交"><a href="#用checkout移动提交" class="headerlink" title="用checkout移动提交"></a>用checkout移动提交</h3><p>执行checkout可以让操作目录中的文件变成指定某个时刻文件的状态</p>
<h2 id="第III章-多人协作使用git"><a href="#第III章-多人协作使用git" class="headerlink" title="第III章 多人协作使用git"></a>第III章 多人协作使用git</h2><h3 id="复制练习用仓库"><a href="#复制练习用仓库" class="headerlink" title="复制练习用仓库"></a>复制练习用仓库</h3><p>怎么复制？1.复刻；2，克隆<br>一个是复制到GitHub上，一个是复制到本地上</p>
<ul>
<li>复刻：指复制他人公开的远程仓库到自己账号中</li>
<li>克隆：把远程仓库复制到本地</li>
</ul>
<h3 id="创建并行世界-分支"><a href="#创建并行世界-分支" class="headerlink" title="创建并行世界(分支)"></a>创建并行世界(分支)</h3><ul>
<li>分支是什么？<br>分支是一个指向提交对象可变指针。指针的意思就是“现在”</li>
<li>移动分支<br>可以用checkout来让自己移动到任意一次提交</li>
<li>master是什么？<br>最开始就存在的分支，就像河流的“干流”</li>
</ul>
<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><p>merge可以让分支进行合并</p>
<h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><p>上传数据，推送</p>
<h3 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h3><p>想要下载并反映到本地仓库的时候就是拉取</p>
<h3 id="有冲突怎么办"><a href="#有冲突怎么办" class="headerlink" title="有冲突怎么办"></a>有冲突怎么办</h3><ul>
<li>冲突是什么？<br>在同一行代码在同一时间被不同的人修改时发生的状况</li>
</ul>
<h3 id="从拉取请求到合并"><a href="#从拉取请求到合并" class="headerlink" title="从拉取请求到合并"></a>从拉取请求到合并</h3><p>想把自己的代码同步到fork源仓库中，用拉取请求(pull request)</p>
<h1 id="git实践学习"><a href="#git实践学习" class="headerlink" title="git实践学习"></a>git实践学习</h1><h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><ol>
<li><code>git commit</code>是Git 仓库中的提交记录保存  </li>
<li><code>git branch 名字</code>是创建分支  </li>
<li><code>git checkout &lt;name&gt;</code>让我们在提交修改之前先切换到新的分支上  </li>
<li>如果你想创建一个新的分支同时切换到新创建的分支的话，可以通过<code>git checkout -b &lt;your-branch-name&gt;</code>来实现。</li>
<li>将两个分支合并到一起方法1：<code>git merge</code></li>
<li>将两个分支合并到一起方法2：<code>git rebase</code></li>
</ol>
<h2 id="高级篇"><a href="#高级篇" class="headerlink" title="高级篇"></a>高级篇</h2><ol>
<li><code>HEAD</code>是一个对当前所在分支的符号引用 —— 也就是指向你正在其基础上进行工作的提交记录。</li>
<li><code>HEAD</code>总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变<code>HEAD</code>的指向开始的。</li>
<li>用<code>git log</code>来查查看提交记录的哈希值</li>
<li>操作符 (^)。把这个符号加在引用名称的后面，表示让 Git 寻找指定提交记录的 parent 提交。</li>
<li><code>~&lt;num&gt;</code>一次后退num步</li>
<li>我使用相对引用最多的就是移动分支。可以直接使用 -f 选项让分支指向另一个提交。例如:<code>git branch -f main HEAD~3</code>。上面的命令会将 main 分支强制指向 HEAD 的第 3 级 parent 提交。</li>
<li><code>git reset</code>通过把分支记录回退几个提交记录来实现撤销改动。你可以将这想象成“改写历史”</li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo命令</title>
    <url>/2023/07/06/hexo%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h1><h2 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h2><p>使用以下命令后新文章将在博客目录下的<code>/source/_posts/</code>文件夹下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></p>
<p>举个例子，我今天想要创建一个hexo命令的文章，那我需要在<code>git bash here</code>中输入<code>hexo new &quot;hexo命令&quot;</code>即可创建新的文章，然后结合另一篇文章<a href="https://aurora7july.github.io/2022/09/03/Markdown%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/">Markdown常见命令</a>使用即可</p>
<h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>以下简写代码和完整代码都可以使用</p>
<p>这是清理缓存：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure></p>
<p>这是本地预览：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo s (完整代码为$ hexo server)</span><br></pre></td></tr></table></figure><br>这时会生成一个<code>http://localhost:4000/</code>网址，它相当于一个草稿，让你先看看要发布的文章有没有什么问题</p>
<p>$ hexo s -p 5000<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果在运行hexo s后出现错误，无法访问等，可能是因为4000被占用了，所以我们可以修改至5000就可以预览我们修改的内容了</span><br></pre></td></tr></table></figure></p>
<p>这是生成静态文件：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo g (完整代码为$ hexo generate)</span><br></pre></td></tr></table></figure></p>
<p>这是将本地文件上传github等git仓库上<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo d (完整代码为$hexo deploy)</span><br></pre></td></tr></table></figure></p>
<p>我通常写完文章后会喜欢使用“一键三连”上传<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><br>如果在上传过程中出现错误，先检查是不是代码打错了。如果不是代码问题，就是网络问题。这个全靠运气了，如果不行重启或者晚一点再上传。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>SystemVerilog学习</title>
    <url>/2023/12/16/systemverilog%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="第I章-验证导论"><a href="#第I章-验证导论" class="headerlink" title="第I章 验证导论"></a>第I章 验证导论</h1><h2 id="基本测试平台的功能"><a href="#基本测试平台的功能" class="headerlink" title="基本测试平台的功能"></a>基本测试平台的功能</h2><p>测试平台的用途在于确定待测设计的正确性，包含以下步骤:<br>1.产生激励<br>2.把激励施加到DUT上<br>3.捕捉响应<br>4.检验正确性<br>5.对照整个验证目标测算进展情况</p>
<h1 id="第II章-数据类型"><a href="#第II章-数据类型" class="headerlink" title="第II章 数据类型"></a>第II章 数据类型</h1><h2 id="内建数据类型"><a href="#内建数据类型" class="headerlink" title="内建数据类型"></a>内建数据类型</h2><p>两种基本类型：变量和线网，各自都可以有四种取值：1,0,Z,X</p>
<h3 id="1-逻辑-logic-类型"><a href="#1-逻辑-logic-类型" class="headerlink" title="1.逻辑(logic)类型"></a>1.逻辑(logic)类型</h3><p>SystemVerilog对经典的reg数据类型进行改进，使得它除了作为一个变量以外，还可以被连续赋值、门单元和模块所驱动，这种改进的数据类型被称为logic。<br>任何使用线网的地方均可以使用logic，但要求logic不能有多个结构性的驱动<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//logic类型使用实例</span><br><span class="line">module logic(input logic);</span><br><span class="line">  parameter CYCLE=20;</span><br><span class="line">  logic q,q_1,d,clk,rst_1;</span><br><span class="line">  inital begin</span><br><span class="line">    clk=0;                           //过程赋值</span><br><span class="line">    forever # (CYCLE/2) clk=~clk;</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  assign rst_1=~rst_h;               //连续赋值</span><br><span class="line">  not n1(q_1,q);                     //q_1被门驱动</span><br><span class="line">  my_dff d1(q,d,clk,rst_1);          //q被模块驱动</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure></p>
<h3 id="2-双状态数据类型"><a href="#2-双状态数据类型" class="headerlink" title="2.双状态数据类型"></a>2.双状态数据类型</h3><p>最简单的双状态数据类型是bit，无符号。另外四种带符号的双状态数据类型是byte,shourtint,int和longint。</p>
<h2 id="定宽数组"><a href="#定宽数组" class="headerlink" title="定宽数组"></a>定宽数组</h2><h3 id="初始化和声明"><a href="#初始化和声明" class="headerlink" title="初始化和声明"></a>初始化和声明</h3><p>必须声明上下界<br><code>int lo_hi[0:15];  //16个整数[0]...[15]</code></p>
<p>声明并使用多维数组<br><code>int array[0:7][0:3];  //完整的声明</code></p>
<h3 id="常量数组"><a href="#常量数组" class="headerlink" title="常量数组"></a>常量数组</h3><p>常量数组：一个单引号加大括号来初始化数组<br><code>int ascend[4]=&#39;&#123;0,1,2,3&#125;;  //对4个元素进行初始化</code></p>
<h3 id="for-和-foreach"><a href="#for-和-foreach" class="headerlink" title="for 和 foreach"></a>for 和 foreach</h3><ul>
<li>i被声明为for循环内的局部变量</li>
<li>在foreach循环中，只需要指定数组名并在其后面的方括号中给出索引变量，SV就会自动遍历数组中的元素。</li>
</ul>
<h3 id="复制和比较"><a href="#复制和比较" class="headerlink" title="复制和比较"></a>复制和比较</h3><ul>
<li>比较仅限于等于或比较不等于</li>
<li>操作符?:一个袖珍的if语句</li>
</ul>
<h3 id="使用位下标和数组上标"><a href="#使用位下标和数组上标" class="headerlink" title="使用位下标和数组上标"></a>使用位下标和数组上标</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inital begin</span><br><span class="line">  bit [31:0] src[5] = &#x27;&#123;5&#123;5&#125;&#125;;</span><br><span class="line">  $display (src[0],,      // &#x27;b101或&#x27;d5</span><br><span class="line">            src[0][0],,   // &#x27;b1</span><br><span class="line">            src[0][2:1]);  // &#x27;b10</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h3 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a>合并数组</h3><p>数组大小定义的格式必须是[msb:lsb]，而不是[size]，就是个数</p>
<h2 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h2><p>动态数组在声明时使用空的下标[ ].</p>
<p>必须调用new[]操作符来分配。</p>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>可以在一个队列中的任意地方增加或删除元素，队列的声明时使用带有美元符号的下标:[$]。队列元素的编号从0到$</p>
<p>可以用字下标串联来替代方法，如果把$ 放在范围表达式的左边，那么$ 将代表最小值；<br>如果把$ 放在范围表达式的右边，那么$ 将代表最大值。</p>
<h2 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h2><p>创建大容量数组可以用动态数组，创建超大容量用关联数组</p>
<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h2 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h2>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>代码</tag>
      </tags>
  </entry>
  <entry>
    <title>linux命令行与shell脚本编程</title>
    <url>/2024/04/02/linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8Eshell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习Linux，使用的书籍为《Linux命令行与shell脚本编程大全》</p>
<h1 id="第一部分-Linux命令行"><a href="#第一部分-Linux命令行" class="headerlink" title="第一部分 Linux命令行"></a>第一部分 Linux命令行</h1><h2 id="第一章-初识Linux"><a href="#第一章-初识Linux" class="headerlink" title="第一章 初识Linux"></a>第一章 初识Linux</h2><p>Linux系统的核心是内核，内核控制着计算机系统的所有软件和硬件，主要负责以下4种功能：</p>
<ol>
<li>系统内存管理</li>
<li>软件程序管理</li>
<li>硬件设备管理</li>
<li>文件系统管理</li>
</ol>
<h2 id="第二章-走进shell"><a href="#第二章-走进shell" class="headerlink" title="第二章 走进shell"></a>第二章 走进shell</h2>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>人脸识别实战</title>
    <url>/2023/03/19/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<h1 id="人脸识别实战"><a href="#人脸识别实战" class="headerlink" title="人脸识别实战"></a>人脸识别实战</h1><h2 id="人脸图片数据收集"><a href="#人脸图片数据收集" class="headerlink" title="人脸图片数据收集"></a>人脸图片数据收集</h2><h3 id="Olivetti-Faces人脸数据集"><a href="#Olivetti-Faces人脸数据集" class="headerlink" title="Olivetti Faces人脸数据集"></a>Olivetti Faces人脸数据集</h3><p>我以纽约大学提供的一个非常小的人脸数据集举例，每人的人脸图片为10张，清晰度还算不错，且图片为经过剪裁和对齐的灰度人脸图片，<a href="https://cs.nyu.edu/~roweis/data/olivettifaces.gif">下载网址</a></p>
<p>想要收集数据，我们首先要做的就是对每个人的人脸图片进行切分。代码实例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line"></span><br><span class="line">data = cv2.imread(&quot;olivettifaces.jpg&quot;)</span><br><span class="line">#转换为灰度图像</span><br><span class="line">data = cv2.cvtColor(data, cv2.COLOR_BRG2GRAY)</span><br><span class="line">#将人脸图片提取为&#123;label:list&#125;形式</span><br><span class="line">faces = &#123;&#125;</span><br><span class="line">label = 0</span><br><span class="line">count = 1</span><br><span class="line">pic_list = []</span><br><span class="line">for row in range(20):</span><br><span class="line">    for column in range(20):</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="LFW人脸数据集"><a href="#LFW人脸数据集" class="headerlink" title="LFW人脸数据集"></a>LFW人脸数据集</h3><p>由马萨诸塞大学提供，<a href="http://vis-www.cs.umass/edu/lfw/#download">LFW人脸数据集</a></p>
<h3 id="YouTube-Faces人脸数据集"><a href="#YouTube-Faces人脸数据集" class="headerlink" title="YouTube Faces人脸数据集"></a>YouTube Faces人脸数据集</h3><p>这个一般是用来做人脸对比的，该网站包含1595个不同的人，来自于3425个在YouTube上下载的视频，网址地址：<a href="http://www.cs.tau.ac.il/~wolf/ytfaces/index.html">YouTube Faces</a></p>
<h2 id="使用OpenCV的人脸检测"><a href="#使用OpenCV的人脸检测" class="headerlink" title="使用OpenCV的人脸检测"></a>使用OpenCV的人脸检测</h2><h3 id="OpenCV的安装"><a href="#OpenCV的安装" class="headerlink" title="OpenCV的安装"></a>OpenCV的安装</h3><p>在Python中直接用pip下载</p>
<pre><code>pip install opencv-python
</code></pre><p>如果是在anaconda环境中安装OpenCV，可以通过以下方法：</p>
<pre><code>conda install opencv
</code></pre><h3 id="OpenCV的检测"><a href="#OpenCV的检测" class="headerlink" title="OpenCV的检测"></a>OpenCV的检测</h3><pre><code>#查看引入OpenCV库时会不会报错
import cv2
#查看安装版本
cv2.__version__
</code></pre><h3 id="Haar级联分类器"><a href="#Haar级联分类器" class="headerlink" title="Haar级联分类器"></a>Haar级联分类器</h3><p>在此之前需要先下载两个训练好的<code>xml文件</code>，可以在GitHub中<a href="https://github.com/opencv/opencv/tree/master/data/haarcascades">下载</a>将下载的文件放到和运行脚本同一个文件就可以了。</p>
<p>如果你没有放对xml，就会出现以下错误提示：<code>errror:(-215)!......</code></p>
<p>获得训练好的模型之后，就可以根据这个模型进行人脸识别了，完整代码如下：</p>
<pre><code>import cv2
#创建人脸检测级联分类器对象实例
face_cascade = cv2.CascadeClassifier(&#39;haarcascade_frontalface_default.xml&#39;)
#或采用lbp特征进行检测
#face_cascade = cv2.CascadeClassifier(&#39;lbpcascade_frontalface.xml&#39;)
#创建人眼检测级联分类的实例
eye_cascade = cv2.CascadeClassifier(&#39;haarcascade_eye.xml&#39;)
#载入图片
img = cv2.imread(&#39;lena.jpg&#39;)
#图片颜色意义不大，灰度化处理即可
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
#调用级联分类器进行多尺度检测
faces = face_cascade.detectMultiScale(gray, 1.3, 5)
#遍历检测到的结果
for (x,y,w,h) in faces:
    #检测矩形框，颜色值的顺序为BGR，即矩阵的颜色为蓝色
    cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)
    #roi即region of interest, 意思是感兴趣的领域
    roi_gray = gray[y:y+h, x:x+w]
    roi_color = img[y:y+h, x:x+w]
    #在检测到的人脸区域内检测眼睛
    eyes = eye_cascade.detectMultiScale(roi_gray)
    for (ex,ey,ew,eh) in eyes:
        cv2.rectangle(roi_color,(ex,ey),(ex+ew,ey+eh),(0,255,0),2)
#写出图片
cv2.imwrite(&#39;detected_face.jpg&#39;,img) 
</code></pre><h2 id="使用Dlib的人脸检测"><a href="#使用Dlib的人脸检测" class="headerlink" title="使用Dlib的人脸检测"></a>使用Dlib的人脸检测</h2><p>Dlib自带了基于Hog特征的人脸检测器，同时在较新版本的Dlib 中，也自带了基于最大边界对象检测器 (Maximum-Margin Object Detector，MMOD)的人脸检测方法。</p>
<h3 id="基于Hog-SVM的人脸检测"><a href="#基于Hog-SVM的人脸检测" class="headerlink" title="基于Hog-SVM的人脸检测"></a>基于Hog-SVM的人脸检测</h3><p>下面示范一下使用 Dlib 自带的 Hog-SVM 人脸检测器的使用方法:<br>    import dlib<br>    import cv2</p>
<pre><code>img = cv2 .imread(&#39;lena.jpg&#39;)

# 加载检测模型
hog_face_detector = dlib.get_frontal_face_detector()
faceRects = hog_face_detector(img，0)
for faceRect in faceRects:
    xl = faceRect.left ()
    y1 = faceRect.top()
    x2 = faceRect.right ()
    y2 = faceRect.bottom()
</code></pre><p>上述代码需要下载Dlib训练好的检测模型，<a href="htp://dlib. net/files/data/dlib_face_detector_training_data. tar. gz">官方地址</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu学习记录</title>
    <url>/2024/08/08/ubuntu%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="权限开放"><a href="#权限开放" class="headerlink" title="权限开放"></a>权限开放</h2><p><code>sudo -s</code></p>
<h2 id="共享文件夹位置"><a href="#共享文件夹位置" class="headerlink" title="共享文件夹位置"></a>共享文件夹位置</h2><p><code>cd /</code><br><code>ls</code><br><code>cd mnt</code><br><code>ls</code><br><code>vmhgfs-fuse /mnt/hgfs</code><br>进去文件就可以了</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>半导体制造</title>
    <url>/2023/09/16/%E5%8D%8A%E5%AF%BC%E4%BD%93%E5%88%B6%E9%80%A0/</url>
    <content><![CDATA[<h1 id="半导体制造"><a href="#半导体制造" class="headerlink" title="半导体制造"></a>半导体制造</h1><p>半导体制程是被用于制造芯片，一种日常使用的电气和电子器件中集成电路的处理工艺。它是一系列照相和化学处理步骤，在其中电子电路逐渐形成在使用纯半导体材料制作的晶片上。硅是今天最常用的半导体材料，其他还有各种复合半导体材料。从一开始晶圆加工，到芯片封装测试，直到出货，通常需要6到8周，并且是在晶圆厂内完成。</p>
<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><p>这是我专业课最后期末复习的笔记，内容不是很多，都是知识点，也不是很难，只需要记住就可以了。如果在预览过程中发现有知识性错误请及时联系我修改！</p>
<p>若无法显示PDF，可以点击该链接下载<a href="https://github.com/Aurora7july/files/blob/main/%E7%AC%94%E8%AE%B0PDF/%E5%8D%8A%E5%AF%BC%E4%BD%93%E5%88%B6%E9%80%A0.pdf">半导体制造</a></p>


	<div class="row">
    <embed src="/pdf/半导体制造.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>数字电路与verilog结合</title>
    <url>/2024/08/08/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E4%B8%8Everilog%E7%BB%93%E5%90%88/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>鄙人能力有限，对数电的理解还远远不够，甚至在基础知识上也有问题。于是写下此篇post，加深对数电的理解，并且结合verilog代码。在代码部分，我和同伴共同创作，会使用ChatGPT进行检测。<br><strong>注意：若代码有问题，请及时提出自己的疑问或是指出我的错误，相互学习共同进步，十分感谢！</strong></p>
<h1 id="三种基本运算"><a href="#三种基本运算" class="headerlink" title="三种基本运算"></a>三种基本运算</h1><h2 id="与门"><a href="#与门" class="headerlink" title="与门"></a>与门</h2><h3 id="表达式与真值表"><a href="#表达式与真值表" class="headerlink" title="表达式与真值表"></a>表达式与真值表</h3><ol>
<li>表达式<script type="math/tex; mode=display">Y=A\cdot B</script></li>
<li>真值表</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">A</th>
<th style="text-align:center">B</th>
<th style="text-align:center">Y</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
</div>
<h3 id="verilog代码"><a href="#verilog代码" class="headerlink" title="verilog代码"></a>verilog代码</h3><ol>
<li>结构化描述<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module and_gate (</span><br><span class="line">    input a,</span><br><span class="line">    input b,</span><br><span class="line">    output c</span><br><span class="line">);</span><br><span class="line">    assign c = a &amp; b;</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>
顶层模块<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module top_module (</span><br><span class="line">    input a,</span><br><span class="line">    input b,</span><br><span class="line">    output c</span><br><span class="line">);</span><br><span class="line">    // 实例化与门</span><br><span class="line">    and_gate u1 (</span><br><span class="line">        .a(a),</span><br><span class="line">        .b(b),</span><br><span class="line">        .c(c)</span><br><span class="line">    );</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure></li>
<li>数据流描述<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module and_gate (</span><br><span class="line">    input a,</span><br><span class="line">    input b,</span><br><span class="line">    output c</span><br><span class="line">);</span><br><span class="line">    // 数据流描述</span><br><span class="line">    assign c = a &amp; b;</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure></li>
<li>行为级描述<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module and_gate (</span><br><span class="line">    input a,</span><br><span class="line">    input b,</span><br><span class="line">    output reg c</span><br><span class="line">);</span><br><span class="line">    // 行为级描述</span><br><span class="line">    always @ (a or b) begin</span><br><span class="line">        c = a &amp; b;</span><br><span class="line">    end</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="或门"><a href="#或门" class="headerlink" title="或门"></a>或门</h2><h3 id="表达式与真值表-1"><a href="#表达式与真值表-1" class="headerlink" title="表达式与真值表"></a>表达式与真值表</h3><ol>
<li>表达式<script type="math/tex; mode=display">Y=A + B</script></li>
<li>真值表</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">A</th>
<th style="text-align:center">B</th>
<th style="text-align:center">Y</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
</div>
<h3 id="verilog代码-1"><a href="#verilog代码-1" class="headerlink" title="verilog代码"></a>verilog代码</h3><ol>
<li>结构化描述<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module or_gate (</span><br><span class="line">    input a,</span><br><span class="line">    input b,</span><br><span class="line">    output c</span><br><span class="line">);</span><br><span class="line">    assign c = a | b;</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure></li>
<li>数据流描述<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module or_not_gate (</span><br><span class="line">    input a,</span><br><span class="line">    input b,</span><br><span class="line">    output c</span><br><span class="line">);</span><br><span class="line">    // 数据流描述</span><br><span class="line">    wire or_out;</span><br><span class="line">    </span><br><span class="line">    // 或门</span><br><span class="line">    assign or_out = a | b;</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure></li>
<li>行为级描述<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module or_gate (</span><br><span class="line">    input a,</span><br><span class="line">    input b,</span><br><span class="line">    output reg c</span><br><span class="line">);</span><br><span class="line">    // 行为级描述</span><br><span class="line">    always @ (a or b) begin</span><br><span class="line">        c = a | b;</span><br><span class="line">    end</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="非门"><a href="#非门" class="headerlink" title="非门"></a>非门</h2><h3 id="表达式与真值表-2"><a href="#表达式与真值表-2" class="headerlink" title="表达式与真值表"></a>表达式与真值表</h3><ol>
<li>表达式<script type="math/tex; mode=display">Y=\bar{A}</script></li>
<li>真值表</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">A</th>
<th style="text-align:center">Y</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
</div>
<h3 id="verilog代码-2"><a href="#verilog代码-2" class="headerlink" title="verilog代码"></a>verilog代码</h3><ol>
<li>结构化描述<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module not_gate (</span><br><span class="line">    input a,</span><br><span class="line">    output b</span><br><span class="line">);</span><br><span class="line">    assign b = ~a;</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure></li>
<li>数据流描述<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module or_not_gate (</span><br><span class="line">    input a,</span><br><span class="line">    input b,</span><br><span class="line">    output c</span><br><span class="line">);</span><br><span class="line">    // 数据流描述</span><br><span class="line">    wire or_out;</span><br><span class="line">    </span><br><span class="line">    // 非门</span><br><span class="line">    assign c = ~or_out;</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure></li>
<li>行为级描述<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module not_gate (</span><br><span class="line">    input a,</span><br><span class="line">    output reg b</span><br><span class="line">);</span><br><span class="line">    // 行为级描述</span><br><span class="line">    always @ (a) begin</span><br><span class="line">        b = ~a;</span><br><span class="line">    end</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="与非"><a href="#与非" class="headerlink" title="与非"></a>与非</h2><h3 id="表达式与真值表-3"><a href="#表达式与真值表-3" class="headerlink" title="表达式与真值表"></a>表达式与真值表</h3><ol>
<li>表达式<script type="math/tex; mode=display">Y=\overline{(A\cdot B) }</script></li>
<li>真值表</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">A</th>
<th style="text-align:center">B</th>
<th style="text-align:center">Y</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
</div>
<h3 id="verilog代码-3"><a href="#verilog代码-3" class="headerlink" title="verilog代码"></a>verilog代码</h3><ol>
<li>结构化结构<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module nand_gate (</span><br><span class="line">    input wire A,</span><br><span class="line">    input wire B,</span><br><span class="line">    output wire Y</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    wire and_out;</span><br><span class="line">    </span><br><span class="line">    // 使用与门和非门组合实现与非门</span><br><span class="line">    and (and_out, A, B);</span><br><span class="line">    not (Y, and_out);</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure></li>
<li>数据流描述<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module nand_gate (</span><br><span class="line">    input wire A,</span><br><span class="line">    input wire B,</span><br><span class="line">    output wire Y</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    // 直接用数据流描述与非门的逻辑功能</span><br><span class="line">    assign Y = ~(A &amp; B);</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure></li>
<li>行为级描述<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module nand_gate (</span><br><span class="line">    input wire A,</span><br><span class="line">    input wire B,</span><br><span class="line">    output reg Y</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    // 使用 always 块描述与非门的行为</span><br><span class="line">    always @ (A or B) begin</span><br><span class="line">        Y = ~(A &amp; B);</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="或非"><a href="#或非" class="headerlink" title="或非"></a>或非</h2><h3 id="表达式与真值表-4"><a href="#表达式与真值表-4" class="headerlink" title="表达式与真值表"></a>表达式与真值表</h3><ol>
<li>表达式<script type="math/tex; mode=display">Y=\overline{(A + B) }</script></li>
<li>真值表</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">A</th>
<th style="text-align:center">B</th>
<th style="text-align:center">Y</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
</div>
<h3 id="verilog代码-4"><a href="#verilog代码-4" class="headerlink" title="verilog代码"></a>verilog代码</h3><ol>
<li><p>结构化结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module nor_gate (</span><br><span class="line">    input wire A,</span><br><span class="line">    input wire B,</span><br><span class="line">    output wire Y</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    wire or_out;</span><br><span class="line"></span><br><span class="line">    // 使用或门和非门组合实现或非门</span><br><span class="line">    or (or_out, A, B);</span><br><span class="line">    not (Y, or_out);</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据流描述</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module nor_gate (</span><br><span class="line">    input wire A,</span><br><span class="line">    input wire B,</span><br><span class="line">    output wire Y</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    // 直接用数据流描述或非门的逻辑功能</span><br><span class="line">    assign Y = ~(A | B);</span><br><span class="line"></span><br><span class="line">endmodule</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>行为级描述</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module nor_gate (</span><br><span class="line">    input wire A,</span><br><span class="line">    input wire B,</span><br><span class="line">    output reg Y</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    // 使用 always 块描述或非门的行为</span><br><span class="line">    always @ (A or B) begin</span><br><span class="line">        Y = ~(A | B);</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="与或非"><a href="#与或非" class="headerlink" title="与或非"></a>与或非</h2><h3 id="表达式与真值表-5"><a href="#表达式与真值表-5" class="headerlink" title="表达式与真值表"></a>表达式与真值表</h3><ol>
<li>表达式<script type="math/tex; mode=display">Y=\overline{(A\cdot B+C\cdot D)}</script></li>
<li>真值表</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">A</th>
<th style="text-align:center">B</th>
<th style="text-align:center">C</th>
<th style="text-align:center">D</th>
<th style="text-align:center">Y</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
</div>
<h3 id="verilog代码-5"><a href="#verilog代码-5" class="headerlink" title="verilog代码"></a>verilog代码</h3><ol>
<li><p>结构化结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module nand_gate (</span><br><span class="line">    input wire A,</span><br><span class="line">    input wire B,</span><br><span class="line">    output wire Y</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    wire and_out;</span><br><span class="line"></span><br><span class="line">    // 使用与门和非门组合实现与或非门</span><br><span class="line">    and (and_out, A, B);</span><br><span class="line">    not (Y, and_out);</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据流描述</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module nand_gate (</span><br><span class="line">    input wire A,</span><br><span class="line">    input wire B,</span><br><span class="line">    output wire Y</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    // 直接用数据流描述与或非门的逻辑功能</span><br><span class="line">    assign Y = ~(A &amp; B);</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure></li>
<li>行为级描述<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module nand_gate (</span><br><span class="line">    input wire A,</span><br><span class="line">    input wire B,</span><br><span class="line">    output reg Y</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    // 使用 always 块描述与或非门的行为</span><br><span class="line">    always @ (A or B) begin</span><br><span class="line">        Y = ~(A &amp; B);</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h2><h3 id="表达式与真值表-6"><a href="#表达式与真值表-6" class="headerlink" title="表达式与真值表"></a>表达式与真值表</h3><ol>
<li>表达式<script type="math/tex; mode=display">Y = A\oplus  B</script></li>
<li>真值表</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">A</th>
<th style="text-align:center">B</th>
<th style="text-align:center">Y</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
</div>
<h3 id="verilog代码-6"><a href="#verilog代码-6" class="headerlink" title="verilog代码"></a>verilog代码</h3><ol>
<li><p>结构化结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module xor_gate (</span><br><span class="line">    input wire A,</span><br><span class="line">    input wire B,</span><br><span class="line">    output wire Y</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    wire and1, and2, notA, notB;</span><br><span class="line"></span><br><span class="line">    // 基于基本逻辑门组合实现异或门</span><br><span class="line">    not (notA, A);</span><br><span class="line">    not (notB, B);</span><br><span class="line">    and (and1, A, notB);</span><br><span class="line">    and (and2, notA, B);</span><br><span class="line">    or (Y, and1, and2);</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据流描述</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module xor_gate (</span><br><span class="line">    input wire A,</span><br><span class="line">    input wire B,</span><br><span class="line">    output wire Y</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    // 直接用数据流描述异或门的逻辑功能</span><br><span class="line">    assign Y = A ^ B;</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>
</li>
<li><p>行为级描述</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module xor_gate (</span><br><span class="line">    input wire A,</span><br><span class="line">    input wire B,</span><br><span class="line">    output reg Y</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    // 使用 always 块描述异或门的行为</span><br><span class="line">    always @ (A or B) begin</span><br><span class="line">        Y = A ^ B;</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="同或"><a href="#同或" class="headerlink" title="同或"></a>同或</h2><h3 id="表达式与真值表-7"><a href="#表达式与真值表-7" class="headerlink" title="表达式与真值表"></a>表达式与真值表</h3><ol>
<li><p>表达式</p>
<script type="math/tex; mode=display">Y = A\odot B</script></li>
<li><p>真值表</p>
</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">A</th>
<th style="text-align:center">B</th>
<th style="text-align:center">Y</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
</div>
<h3 id="verilog代码-7"><a href="#verilog代码-7" class="headerlink" title="verilog代码"></a>verilog代码</h3><ol>
<li><p>结构化结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module xnor_gate (</span><br><span class="line">    input wire A,</span><br><span class="line">    input wire B,</span><br><span class="line">    output wire Y</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    wire xor_out;</span><br><span class="line"></span><br><span class="line">    // 使用异或门和非门组合实现同或门</span><br><span class="line">    xor (xor_out, A, B);</span><br><span class="line">    not (Y, xor_out);</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据流描述</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module xnor_gate (</span><br><span class="line">    input wire A,</span><br><span class="line">    input wire B,</span><br><span class="line">    output wire Y</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    // 直接用数据流描述同或门的逻辑功能</span><br><span class="line">    assign Y = ~(A ^ B);</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>
</li>
<li><p>行为级描述</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module xnor_gate (</span><br><span class="line">    input wire A,</span><br><span class="line">    input wire B,</span><br><span class="line">    output reg Y</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    // 使用 always 块描述同或门的行为</span><br><span class="line">    always @ (A or B) begin</span><br><span class="line">        Y = ~(A ^ B);</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="组合逻辑电路"><a href="#组合逻辑电路" class="headerlink" title="组合逻辑电路"></a>组合逻辑电路</h1><h2 id="编码器"><a href="#编码器" class="headerlink" title="编码器"></a>编码器</h2><h3 id="普通编码器"><a href="#普通编码器" class="headerlink" title="普通编码器"></a>普通编码器</h3><p>在普通编码器中，通常是任何时刻只允许输入一个编码信号</p>
<ol>
<li>真值表</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">输入线 (A)</th>
<th style="text-align:center">输出线 (Y2)</th>
<th style="text-align:center">输出线 (Y1)</th>
<th style="text-align:center">输出线 (Y0)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0000 0001</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">0000 0010</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">0000 0100</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">0000 1000</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">0001 0000</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">0001 0000</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">0010 0000</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">0100 0000</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
</div>
<ol>
<li><p>逻辑式</p>
<script type="math/tex; mode=display">\left\{\begin{matrix}
Y_2 = I_4 + I_5 + I_6 + I_7\\
Y_1 = I_2 + I_3 + I_6 + I_7\\
Y_0 = I_1 + I_3 + I_5 + I_7
\end{matrix}\right.</script></li>
<li><p>verilog</p>
</li>
</ol>
<ul>
<li>结构化描述<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module encoder8to3 (</span><br><span class="line">    input [7:0] in,</span><br><span class="line">    output reg [2:0] out</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    always @(*) begin</span><br><span class="line">        case (in)</span><br><span class="line">            8&#x27;b00000001: out = 3&#x27;b000;</span><br><span class="line">            8&#x27;b00000010: out = 3&#x27;b001;</span><br><span class="line">            8&#x27;b00000100: out = 3&#x27;b010;</span><br><span class="line">            8&#x27;b00001000: out = 3&#x27;b011;</span><br><span class="line">            8&#x27;b00010000: out = 3&#x27;b100;</span><br><span class="line">            8&#x27;b00100000: out = 3&#x27;b101;</span><br><span class="line">            8&#x27;b01000000: out = 3&#x27;b110;</span><br><span class="line">            8&#x27;b10000000: out = 3&#x27;b111;</span><br><span class="line">            default: out = 3&#x27;bxxx; // Error case</span><br><span class="line">        endcase</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure></li>
<li>数据流描述<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module encoder8to3 (</span><br><span class="line">    input [7:0] in,</span><br><span class="line">    output [2:0] out</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    assign out = (in[7]) ? 3&#x27;b111 :</span><br><span class="line">                 (in[6]) ? 3&#x27;b110 :</span><br><span class="line">                 (in[5]) ? 3&#x27;b101 :</span><br><span class="line">                 (in[4]) ? 3&#x27;b100 :</span><br><span class="line">                 (in[3]) ? 3&#x27;b011 :</span><br><span class="line">                 (in[2]) ? 3&#x27;b010 :</span><br><span class="line">                 (in[1]) ? 3&#x27;b001 :</span><br><span class="line">                           3&#x27;b000;</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure></li>
<li>行为级描述<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module encoder8to3 (</span><br><span class="line">    input [7:0] in,</span><br><span class="line">    output reg [2:0] out</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    always @(*) begin</span><br><span class="line">        if (in[7]) out = 3&#x27;b111;</span><br><span class="line">        else if (in[6]) out = 3&#x27;b110;</span><br><span class="line">        else if (in[5]) out = 3&#x27;b101;</span><br><span class="line">        else if (in[4]) out = 3&#x27;b100;</span><br><span class="line">        else if (in[3]) out = 3&#x27;b011;</span><br><span class="line">        else if (in[2]) out = 3&#x27;b010;</span><br><span class="line">        else if (in[1]) out = 3&#x27;b001;</span><br><span class="line">        else out = 3&#x27;b000;</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="优先编码器"><a href="#优先编码器" class="headerlink" title="优先编码器"></a>优先编码器</h3><p>优先编码器允许同时输入两个以上的编码信号，下面以8线-3线优先编码器为例：</p>
<ol>
<li>真值表<br>懒得画</li>
<li>逻辑式<script type="math/tex; mode=display">
\left\{\begin{matrix}
\overline{Y_2} = \overline{(I_4+I_5+I_6+I_7)S}   \\
\overline{Y_1} = \overline{(I_2\overline{I_4}\overline{I_5}+I_3\overline{I_4}\overline{I_5}+I_6+I_7)S}\\
\overline{Y_0} = \overline{(I_1\overline{I_2}\overline{I_4}\overline{I_6}+I_3\overline{I_4}\overline{I_6}+I_5\overline{I_6}+I_7 )S}
\end{matrix}\right.</script></li>
<li>verilog</li>
</ol>
<ul>
<li>结构化描述<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 结构化描述的8线-3线优先编码器</span><br><span class="line"></span><br><span class="line">module priority_encoder_8to3 (</span><br><span class="line">    input [7:0] I,    // 8个输入信号</span><br><span class="line">    output reg [2:0] Y, // 3位输出信号</span><br><span class="line">    output reg valid  // 有效信号</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    // 优先级编码的子模块</span><br><span class="line">    always @(*) begin</span><br><span class="line">        // 默认值</span><br><span class="line">        Y = 3&#x27;b000;</span><br><span class="line">        valid = 0;</span><br><span class="line">        </span><br><span class="line">        // 按优先级检查输入信号</span><br><span class="line">        if (I[7]) begin</span><br><span class="line">            Y = 3&#x27;b111;</span><br><span class="line">            valid = 1;</span><br><span class="line">        end else if (I[6]) begin</span><br><span class="line">            Y = 3&#x27;b110;</span><br><span class="line">            valid = 1;</span><br><span class="line">        end else if (I[5]) begin</span><br><span class="line">            Y = 3&#x27;b101;</span><br><span class="line">            valid = 1;</span><br><span class="line">        end else if (I[4]) begin</span><br><span class="line">            Y = 3&#x27;b100;</span><br><span class="line">            valid = 1;</span><br><span class="line">        end else if (I[3]) begin</span><br><span class="line">            Y = 3&#x27;b011;</span><br><span class="line">            valid = 1;</span><br><span class="line">        end else if (I[2]) begin</span><br><span class="line">            Y = 3&#x27;b010;</span><br><span class="line">            valid = 1;</span><br><span class="line">        end else if (I[1]) begin</span><br><span class="line">            Y = 3&#x27;b001;</span><br><span class="line">            valid = 1;</span><br><span class="line">        end else if (I[0]) begin</span><br><span class="line">            Y = 3&#x27;b000;</span><br><span class="line">            valid = 1;</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure></li>
<li>行为级描述<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 行为级描述的8线-3线优先编码器</span><br><span class="line"></span><br><span class="line">module priority_encoder_8to3 (</span><br><span class="line">    input [7:0] I,    // 8个输入信号</span><br><span class="line">    output reg [2:0] Y, // 3位输出信号</span><br><span class="line">    output reg valid  // 有效信号</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    always @(*) begin</span><br><span class="line">        // 默认值</span><br><span class="line">        Y = 3&#x27;b000;</span><br><span class="line">        valid = 0;</span><br><span class="line">        </span><br><span class="line">        // 按优先级检查输入信号</span><br><span class="line">        casez (I)</span><br><span class="line">            8&#x27;b1??????? : begin Y = 3&#x27;b111; valid = 1; end</span><br><span class="line">            8&#x27;b01?????? : begin Y = 3&#x27;b110; valid = 1; end</span><br><span class="line">            8&#x27;b001????? : begin Y = 3&#x27;b101; valid = 1; end</span><br><span class="line">            8&#x27;b0001???? : begin Y = 3&#x27;b100; valid = 1; end</span><br><span class="line">            8&#x27;b00001??? : begin Y = 3&#x27;b011; valid = 1; end</span><br><span class="line">            8&#x27;b000001?? : begin Y = 3&#x27;b010; valid = 1; end</span><br><span class="line">            8&#x27;b0000001? : begin Y = 3&#x27;b001; valid = 1; end</span><br><span class="line">            8&#x27;b00000001 : begin Y = 3&#x27;b000; valid = 1; end</span><br><span class="line">            default : begin Y = 3&#x27;b000; valid = 0; end</span><br><span class="line">        endcase</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="译码器"><a href="#译码器" class="headerlink" title="译码器"></a>译码器</h2><p>这里以38译码器为例</p>
<ol>
<li>真值表</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">$A_1$</th>
<th style="text-align:center">$A_2$</th>
<th style="text-align:center">$A_3$</th>
<th style="text-align:center">$Y_7$</th>
<th style="text-align:center">$Y_6$</th>
<th style="text-align:center">$Y_5$</th>
<th style="text-align:center">$Y_4$</th>
<th style="text-align:center">$Y_3$</th>
<th style="text-align:center">$Y_2$</th>
<th style="text-align:center">$Y_1$</th>
<th style="text-align:center">$Y_0$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
</div>
<ol>
<li>逻辑式<script type="math/tex; mode=display">
\begin{align*}
 Y_0=\overline{A_2A_1A_0}=m_0 \\
 Y_1=\overline{A_2A_1}A_0=m_1 \\
 Y_2=\overline{A_2}A_1\overline{A_0}=m_2 \\
 Y_3=\overline{A_2}A_1A_0=m_3 \\
 Y_4=A_2\overline{A_1A_0}=m_4 \\
 Y_5=A_2\overline{A_1}A_0=m_5 \\
 Y_6=A_2A_1\overline{A_0}=m_6 \\
 Y_7=A_2A_1A_0=m_7 
\end{align*}</script></li>
<li>verilog</li>
</ol>
<ul>
<li>结构化描述<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module decoder38 (</span><br><span class="line">    input [2:0] A,      // 3-bit input</span><br><span class="line">    output reg [7:0] Y  // 8-bit output</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">always @(*) begin</span><br><span class="line">    // Default all outputs to 0</span><br><span class="line">    Y = 8&#x27;b00000000;</span><br><span class="line">    </span><br><span class="line">    case (A)</span><br><span class="line">        3&#x27;b000: Y = 8&#x27;b00000001;</span><br><span class="line">        3&#x27;b001: Y = 8&#x27;b00000010;</span><br><span class="line">        3&#x27;b010: Y = 8&#x27;b00000100;</span><br><span class="line">        3&#x27;b011: Y = 8&#x27;b00001000;</span><br><span class="line">        3&#x27;b100: Y = 8&#x27;b00010000;</span><br><span class="line">        3&#x27;b101: Y = 8&#x27;b00100000;</span><br><span class="line">        3&#x27;b110: Y = 8&#x27;b01000000;</span><br><span class="line">        3&#x27;b111: Y = 8&#x27;b10000000;</span><br><span class="line">        default: Y = 8&#x27;b00000000;</span><br><span class="line">    endcase</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure></li>
<li>行为级描述<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module decoder38 (</span><br><span class="line">    input [2:0] A,      // 3-bit input</span><br><span class="line">    output [7:0] Y     // 8-bit output</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    wire [7:0] dec_out;</span><br><span class="line">    </span><br><span class="line">    assign dec_out[0] = ~A[2] &amp; ~A[1] &amp; ~A[0];</span><br><span class="line">    assign dec_out[1] = ~A[2] &amp; ~A[1] &amp; A[0];</span><br><span class="line">    assign dec_out[2] = ~A[2] &amp; A[1] &amp; ~A[0];</span><br><span class="line">    assign dec_out[3] = ~A[2] &amp; A[1] &amp; A[0];</span><br><span class="line">    assign dec_out[4] = A[2] &amp; ~A[1] &amp; ~A[0];</span><br><span class="line">    assign dec_out[5] = A[2] &amp; ~A[1] &amp; A[0];</span><br><span class="line">    assign dec_out[6] = A[2] &amp; A[1] &amp; ~A[0];</span><br><span class="line">    assign dec_out[7] = A[2] &amp; A[1] &amp; A[0];</span><br><span class="line"></span><br><span class="line">    // Assign the decoded output</span><br><span class="line">    assign Y = dec_out;</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="数据选择器"><a href="#数据选择器" class="headerlink" title="数据选择器"></a>数据选择器</h2><p>以四选一数据选择器为例</p>
<ol>
<li>真值表</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">$A_1$</th>
<th style="text-align:center">$A_2$</th>
<th style="text-align:center">$A_3$</th>
<th style="text-align:center">$A_4$</th>
<th style="text-align:center">$Y$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
</div>
<ol>
<li>逻辑式<script type="math/tex; mode=display">
F=(A\cdot{\overline{S_0}}\cdot\overline{S_1})+
(B\cdot{\overline{S_0}}\cdot S_1)+
(C\cdot S_0\cdot\overline{S_1})+
(D\cdot S_0\cdot S_1)</script></li>
<li>verilog<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module mux_4_1 (</span><br><span class="line">    input  C，D，E，F,</span><br><span class="line">    input[1:0] s,</span><br><span class="line">    outputreg Mux_out</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">always @ (c or D or E or F or s) begin</span><br><span class="line">  case(s)</span><br><span class="line">    2 &#x27;b0o : Mux_out = C;</span><br><span class="line">    2 &#x27;b01 : Mux_out = D;</span><br><span class="line">    2 &#x27;b10 : Mux_out = E;</span><br><span class="line">    default : Mux_out = F;</span><br><span class="line">  endcase</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="加法器"><a href="#加法器" class="headerlink" title="加法器"></a>加法器</h2><p>以全加器为例</p>
<ol>
<li>真值表</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">$A$</th>
<th style="text-align:center">$B$</th>
<th style="text-align:center">$C_{in}$</th>
<th style="text-align:center">$Sum$</th>
<th style="text-align:center">$Cout$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
</div>
<ol>
<li>逻辑式<script type="math/tex; mode=display">
C_{in} = AB+C_{out}(A+B)</script></li>
<li>verilog</li>
</ol>
<ul>
<li>结构化<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module FA_struct (A, B, Cin, Sum, Count);</span><br><span class="line">    input A;</span><br><span class="line">    input B;</span><br><span class="line">    input Cin;</span><br><span class="line">    output Sum;</span><br><span class="line">    output Count;</span><br><span class="line">    wire S1, T1, T2, T3;</span><br><span class="line"></span><br><span class="line">    xor x1 (S1, A, B);</span><br><span class="line">    xor x2 (Sum, S1, Cin);</span><br><span class="line">    and A1 (T3, A, B );</span><br><span class="line">    and A2 (T2, B, Cin);</span><br><span class="line">    and A3 (T1, A, Cin);</span><br><span class="line">    or O1 (Count, T1, T2, T3 );</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure></li>
<li>行为描述方式<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module FA_behav(A, B, Cin, Sum, Cout );</span><br><span class="line">    input A,B,Cin;</span><br><span class="line">    output Sum,Cout;</span><br><span class="line">    reg Sum, Cout;</span><br><span class="line">    reg T1,T2,T3;</span><br><span class="line">    always@ ( A or B or Cin )</span><br><span class="line">    begin</span><br><span class="line">      Sum = (A ^ B) ^ Cin ;</span><br><span class="line">      T1 = A &amp; Cin;</span><br><span class="line">      T2 = B &amp; Cin ;</span><br><span class="line">      T3 = A &amp; B;</span><br><span class="line">      Cout = (T1| T2) | T3;</span><br><span class="line">    end</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>旅游-新加坡</title>
    <url>/2024/08/29/%E6%97%85%E6%B8%B8-%E6%96%B0%E5%8A%A0%E5%9D%A1/</url>
    <content><![CDATA[<h2 id="旅游时间：2024-8-25-2024-8-27-香港-新加坡"><a href="#旅游时间：2024-8-25-2024-8-27-香港-新加坡" class="headerlink" title="旅游时间：2024.8.25-2024.8.27(香港-新加坡)"></a>旅游时间：2024.8.25-2024.8.27(香港-新加坡)</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>关于新加坡，我从它还没免签的时候就一直期待去旅游，直到这次研习营结束之后有时间可以去了，于8.10买往返票。这是我第一次出国，当然，还是一个人去的。本来这次我不打算告诉妈妈我要出国旅游了，直到去新加坡的前一天，妈妈说让我回家玩一个星期再开学，我就只好坦白了我自己的行程。以为会被骂一顿，没想到妈妈非常开心和支持，并赞助了我500块钱，让我注意安全，并表示怎么不带她一起出去玩，哈哈。非常感谢我的妈妈许女士对我的爱，我也永远爱你。</p>
<h3 id="角色栏"><a href="#角色栏" class="headerlink" title="角色栏"></a>角色栏</h3><ul>
<li>穿着：短袖、短裤、长外套、运动裤、运动鞋</li>
<li>移动方式：步行、地铁、公交、飞机</li>
<li>证件：护照、身份证、visa银行卡、过关小票、机票、行程单</li>
<li>花费：2000+</li>
<li>其他：充电宝、数据线、转换头<br><img src="https://github.com/HauUhang/files/blob/main/%E7%85%A7%E7%89%87/%E6%96%B0%E5%8A%A0%E5%9D%A1/IMG_20240824_152213.jpg?raw=true" alt="出门前准备"></li>
</ul>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>新加坡不能吃口香糖</li>
<li>闯红灯和不走斑马线被抓到要罚款</li>
<li>公交地铁上不能喝水吃东西，要罚款</li>
<li>扶梯靠左，右边让给赶路的人</li>
<li>有鸟欺负你不能还手，否则罚款</li>
</ul>
<h3 id="从香港机场出发"><a href="#从香港机场出发" class="headerlink" title="从香港机场出发"></a>从香港机场出发</h3><p>2024.8.25我急匆匆从学校到港珠澳大桥口岸，路上堵车+司机走错了路，让我一度差点迟到，不过幸运的是赶上了。我所乘坐的是直达机场的大巴，花费220人民币(120港币免税，在机场可退)，包含了托运行李(本次行程我没有需要托运的行李)和值机，非常的方便，我认为这个车票是值得的。在香港机场时，只有值机的姐姐不会说普通话很冷淡的完成了服务，以及borading time时签字的姐姐对除我以外的外国人/港人说thank u(我对她说了thank u以回敬她的不礼貌)，其他人都非常好，哪怕我说普通话也会非常热心的帮助我，解答我的问题。<br><img src="https://github.com/HauUhang/files/blob/main/%E7%85%A7%E7%89%87/%E6%96%B0%E5%8A%A0%E5%9D%A1/IMG_20240825_174400.jpg?raw=true" alt="在港珠澳大桥时"><br><img src="" alt=""></p>
<h3 id="酷航之旅"><a href="#酷航之旅" class="headerlink" title="酷航之旅"></a>酷航之旅</h3><p>在出发前我在网上看到说酷航准点率很低，有被取消的风险，空调也非常冷，会把人冻死，服务也是没有的，甚至很差。为此我买了一份保险，以防机票被取消。不过让我惊讶地是，空调和服务没有网络上说的那么差，我还是非常满意的。因为是红眼航班，为了我之后的精力，我选择上机就睡。<br><img src="https://github.com/HauUhang/files/blob/main/%E7%85%A7%E7%89%87/%E6%96%B0%E5%8A%A0%E5%9D%A1/IMG_20240825_210200.jpg?raw=true" alt="香港-新加坡酷航"></p>
<h3 id="Jewel-抵达"><a href="#Jewel-抵达" class="headerlink" title="Jewel(抵达)"></a>Jewel(抵达)</h3><p>经过4个小时的行程，于凌晨1点多抵达樟宜机场。完成过海关之后，我就到了Jewel，靠近瀑布，空气中弥漫着潮湿和清新的味道，在黑暗处有很多就地而睡的人，为了不打扰他们我拍完照便快速离开，见证了凌晨的Jewel，与我回来时看到的情景完全不同。<br><img src="https://github.com/HauUhang/files/blob/main/%E7%85%A7%E7%89%87/%E6%96%B0%E5%8A%A0%E5%9D%A1/IMG_20240826_015959.jpg?raw=true" alt="凌晨的Jewel"></p>
<h3 id="第一顿早餐-旺"><a href="#第一顿早餐-旺" class="headerlink" title="第一顿早餐(旺)"></a>第一顿早餐(旺)</h3><p>本来第一天要去亚坤的，找流量卡花了很多时间，就在机场随便找了一家吃。前台是一位马来的姐姐，我和她用英文对话，由于我不知道那个菜品怎么念，我就说了NO.1set，姐姐也明白我的意思，问了一些问题，但是我听不懂就用菜单给我解释了，大概的意思是：这个套餐里面有一个咖椰面包+2个鸡蛋+饮品，问我想要什么饮品。我说“kopi”(马来语中咖啡的意思)，姐姐给了我很高的情绪价值“yes! kopi!”不过这家不好吃，可能是我酱油放多了鸡蛋好咸。<br><img src="https://github.com/HauUhang/files/blob/main/%E7%85%A7%E7%89%87/%E6%96%B0%E5%8A%A0%E5%9D%A1/IMG_20240826_062026.jpg?raw=true" alt="旺の早餐"></p>
<h3 id="新加坡南洋理工大学-NTU"><a href="#新加坡南洋理工大学-NTU" class="headerlink" title="新加坡南洋理工大学(NTU)"></a>新加坡南洋理工大学(NTU)</h3><p>到新加坡的第一站就是NTU，很多山路，非常不好走，导航找不到方向，凭直觉走。校园很大，建筑很矮，有免费的校车可以坐。在NTU我参观了各大工程学院，不太好意思去看他们的教室，怕打扰教授和同学上课。<br><img src="https://github.com/HauUhang/files/blob/main/%E7%85%A7%E7%89%87/%E6%96%B0%E5%8A%A0%E5%9D%A1/IMG_20240826_084946.jpg?raw=true" alt="EEE"></p>
<p>参观了著名的自习室小笼包The Hive，里面真的很漂亮。<br><img src="https://github.com/HauUhang/files/blob/main/%E7%85%A7%E7%89%87/%E6%96%B0%E5%8A%A0%E5%9D%A1/IMG_20240826_090900.jpg?raw=true" alt="the hive"></p>
<p>离开之前我去打卡了四语牌，可惜当时身边没有人，没有与校排合影。<br><img src="https://github.com/HauUhang/files/blob/main/%E7%85%A7%E7%89%87/%E6%96%B0%E5%8A%A0%E5%9D%A1/IMG_20240826_100230.jpg?raw=true" alt="四语门"></p>
<h3 id="西海岸公园"><a href="#西海岸公园" class="headerlink" title="西海岸公园"></a>西海岸公园</h3><p>避开旅游圣地圣淘沙，来海边走走可以选择西海岸公园。这里人很少，有地方坐，海景很漂亮，有个港口，货船私船或是停靠岸边，或是潇洒飘荡。<br><img src="https://github.com/HauUhang/files/blob/main/%E7%85%A7%E7%89%87/%E6%96%B0%E5%8A%A0%E5%9D%A1/IMG_20240826_131839.jpg?raw=true" alt="西海岸公园"></p>
<p>我在这里吃了新加坡的麦当劳，说实话，味道一般，牛肉上面的酱有种甜甜的咖喱感，不过我当时很饿，还是吃完了。薯饼没有薯条好吃，可乐全世界都一个样。<br><img src="https://github.com/HauUhang/files/blob/main/%E7%85%A7%E7%89%87/%E6%96%B0%E5%8A%A0%E5%9D%A1/IMG_20240826_122109.jpg?raw=true" alt="M记"></p>
<h3 id="怡丰城"><a href="#怡丰城" class="headerlink" title="怡丰城"></a>怡丰城</h3><p>来这个商场的目的就是为了短暂的休息和看圣淘沙，这次我的行程中没有安排圣淘沙的游玩项目，所以只是远远的看了它一眼就回酒店休息了一会儿。<br><img src="https://github.com/HauUhang/files/blob/main/%E7%85%A7%E7%89%87/%E6%96%B0%E5%8A%A0%E5%9D%A1/IMG_20240826_150523.jpg?raw=true" alt="怡丰城上看圣淘沙"></p>
<h3 id="鱼尾狮公园"><a href="#鱼尾狮公园" class="headerlink" title="鱼尾狮公园"></a>鱼尾狮公园</h3><p>著名景点，不多赘述。<br><img src="https://github.com/HauUhang/files/blob/main/%E7%85%A7%E7%89%87/%E6%96%B0%E5%8A%A0%E5%9D%A1/IMG_20240826_175728.jpg?raw=true" alt="白天的鱼尾狮"></p>
<p>这里和香港相似，新加坡河的两侧分别是金沙酒店和鱼尾狮，而鱼尾狮的附近全是金融的高楼大厦，看着十分壮观，和香港的维多利亚港很像。<br><img src="https://github.com/HauUhang/files/blob/main/%E7%85%A7%E7%89%87/%E6%96%B0%E5%8A%A0%E5%9D%A1/IMG_20240826_194415.jpg?raw=true" alt="壮观的高级打工楼"><br><img src="https://github.com/HauUhang/files/blob/main/%E7%85%A7%E7%89%87/%E6%96%B0%E5%8A%A0%E5%9D%A1/IMG_20240826_193831.jpg?raw=true" alt="鱼尾狮附近金融大厦"></p>
<p>这里无论白天黑夜我都打卡了，各有各的风味。<br><img src="https://github.com/HauUhang/files/blob/main/%E7%85%A7%E7%89%87/%E6%96%B0%E5%8A%A0%E5%9D%A1/IMG_20240826_195225.jpg?raw=true" alt="晚上的鱼尾狮和金沙酒店"></p>
<h3 id="牛水车"><a href="#牛水车" class="headerlink" title="牛水车"></a>牛水车</h3><p>这是第二天的行程了，那天恰巧下大雨了。我在这里拍了新加坡佛牙寺龙华院和马里安曼庙，并且在这里吃了亚坤(太饿了忘记拍照了)，总算是圆了这个心愿。<br>新加坡佛牙寺除了供奉释迦牟尼的遗牙佛牙舍利给佛教信众参观，亦为公众提供社会服务。<br><img src="https://github.com/HauUhang/files/blob/main/%E7%85%A7%E7%89%87/%E6%96%B0%E5%8A%A0%E5%9D%A1/IMG_20240827_100441.jpg?raw=true" alt="牙寺龙华院"></p>
<p>马里安曼庙（Sri Mariamman Temple）是新加坡最古老的兴都教（印度教）寺庙，建筑风格为德拉威风格。其位置处于市中心的桥南路244号，主要为这个城市国家的信奉兴都教的南印度泰米尔裔新加坡人提供服务。由于建筑和历史意义，马里安曼庙已经列入国家级名胜古迹，并且是一个主要的旅游景点。马里安曼庙由新加坡社会发展、青年与体育部下辖的兴都教捐赠委员会负责管理。<br><img src="https://github.com/HauUhang/files/blob/main/%E7%85%A7%E7%89%87/%E6%96%B0%E5%8A%A0%E5%9D%A1/IMG_20240827_095452.jpg?raw=true" alt="马里安曼庙"></p>
<h3 id="Jewel和樟宜机场-返程"><a href="#Jewel和樟宜机场-返程" class="headerlink" title="Jewel和樟宜机场(返程)"></a>Jewel和樟宜机场(返程)</h3><p>白天的樟宜机场和Jewel与晚上大不相同，可以逛的东西更多，很出片，超级漂亮，我逛了很久。<br><img src="https://github.com/HauUhang/files/blob/main/%E7%85%A7%E7%89%87/%E6%96%B0%E5%8A%A0%E5%9D%A1/IMG_20240827_123812.jpg?raw=true" alt="白天的樟宜机场"></p>
<p>我的人生照片XD<br><img src="https://github.com/HauUhang/files/blob/main/%E7%85%A7%E7%89%87/%E6%96%B0%E5%8A%A0%E5%9D%A1/IMG_20240827_134600.jpg?raw=true" alt="在瀑布下"></p>
]]></content>
      <categories>
        <category>个人</category>
      </categories>
      <tags>
        <tag>个人</tag>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>旅游-澳门</title>
    <url>/2023/09/29/%E6%97%85%E6%B8%B8-%E6%BE%B3%E9%97%A8/</url>
    <content><![CDATA[<h2 id="澳门之旅-II"><a href="#澳门之旅-II" class="headerlink" title="澳门之旅 II"></a>澳门之旅 II</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>写这篇post的时候已经是2023.10.8了，本来计划在国庆假期内写完，还是拖到了现在才想起来，接下来就要我凭印象记录了。<br>这次是受高中同学的请求，带其去澳门看看，正好假期有空，便欣然答应。<br>这是我第二次去澳门，上次一人独行，初次领略纸醉金迷和高雅浪漫，可惜时间有限加之体力不足，未见夜晚的澳门的灯红酒绿，颇有些遗憾。此次前往，也算了却我一个小小的心愿。<br>澳门是一座美丽的城市，拥挤与繁华，富裕与友善，是我对这座小城市的印象。这座不及浦东机场面积的小城，竟甚至能在2019年产生世界第二的人均GDP。接下来，我将回忆本次去澳门的所见所闻与君分享。</p>
<h3 id="旅行"><a href="#旅行" class="headerlink" title="旅行"></a>旅行</h3><ul>
<li>过境准备<br>我们乘坐C7611与9:20到达珠海站，之后前往青茂口岸，路途换了20mop坐公车。青茂口岸在2021年9月8日才正式投入使用，这里人少，快捷，凉快，吸取上次在拱北口岸大排队的教训，我们很快通过了海关，正式踏入澳门境内。<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/macau-II/IMG_20230225_091702.jpg?raw=true" alt="珠海站"></li>
<li><p>澳门半岛<br>从口岸坐公车前往澳门亚美打利庇卢大马路市政署和议事亭前地并拍照留念<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/macau-II/1.jpg?raw=true" alt="市政署与议事亭前地"> </p>
<p>之后前往大三巴及周边附近拍照留念<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/macau-II/2.jpg?raw=true" alt="大三巴及周边"></p>
<p>新葡京及附近娱乐场拍照留念<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/macau-II/3.jpg?raw=true" alt="新葡京及附近娱乐场"></p>
<p>在梳打冰室吃午餐<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/macau-II/4.jpg?raw=true" alt="午餐"></p>
<p>吃饱喝足之后前往澳门冼星海大马路澳门回归贺礼陈列馆<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/macau-II/5.jpg?raw=true" alt="澳门回归贺礼陈列馆"></p>
</li>
<li><p>路氹<br>伦敦人、巴黎人、威尼斯人逛逛<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/macau-II/6.jpg?raw=true" alt="三人"></p>
<p>晚饭吃M记，吃太快没拍<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/macau-II/7.jpg?raw=true" alt="晚饭"></p>
<p>夜晚的澳门<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/macau-II/8.jpg?raw=true" alt="夜之城"></p>
</li>
<li>返航<br>结束旅程，乘坐发财车返回口岸<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/macau-II/9.jpg?raw=true" alt="回家"></li>
</ul>
<h3 id="个人感想"><a href="#个人感想" class="headerlink" title="个人感想"></a>个人感想</h3><p>很喜欢澳门，这里民风淳朴，风景怡人，物价吓人。未满21岁还不让我进赌场，不能一睹美女荷官芳容，可惜可惜。下次再来吧，澳门活动也多，可以来一场说走就走的旅行。</p>
]]></content>
      <categories>
        <category>个人</category>
      </categories>
      <tags>
        <tag>个人</tag>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>旅游-外伶仃岛</title>
    <url>/2023/11/04/%E6%97%85%E6%B8%B8-%E5%A4%96%E4%BC%B6%E4%BB%83%E5%B2%9B/</url>
    <content><![CDATA[<h2 id="外伶仃岛一日游"><a href="#外伶仃岛一日游" class="headerlink" title="外伶仃岛一日游"></a>外伶仃岛一日游</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>自国庆假期以后，我便陷入了上课和学习的纠缠，生活中再也不如从前那般恣意。随着身心疲惫渐显，渴望一次宽慰身心、回归自然之旅渐生。因此，我迅速检查了周末的天气情况，立即预订了船票，最终期盼已久的日子终于到来，我难掩内心的喜悦。如今，结束了这次旅程，我迫不及待地开始写这篇文章。</p>
<h3 id="装备列表"><a href="#装备列表" class="headerlink" title="装备列表"></a>装备列表</h3><ul>
<li>穿着：登山帽、墨镜、短袖、运动长裤、运动鞋</li>
<li>军粮：三明治、布丁、一包吐司、巧克力、550ml水</li>
<li>拍摄：手机支架、长焦倍镜</li>
<li>其他：清凉油、身份证、交通卡、充电宝</li>
</ul>
<h3 id="徒步路线"><a href="#徒步路线" class="headerlink" title="徒步路线"></a>徒步路线</h3><p>早上9：40从香洲港码头出发，于11：00抵达外伶仃岛。环岛旅行的交通方式有两种：乘坐观光车和步行前往。为了全身心融入这座美丽的小岛，我选择了徒步旅行。下了船，匆匆拍了两张港口的照片给朋友们分享后，便立即出发。徒步路线大致如下：<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/%E5%A4%96%E4%BC%B6%E4%BB%83%E5%B2%9B/797e81330c452747f69f76c4fecaab9.jpg?raw=true" alt="徒步路线"></p>
<h3 id="矿石湖"><a href="#矿石湖" class="headerlink" title="矿石湖"></a>矿石湖</h3><p>今日的外伶仃岛矿石湖，曾经矿石开挖地，因为人工开挖自然形成的矿坑，遗留的开挖痕迹和大小碎石，足以想象曾经的忙碌与辉煌。<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/%E5%A4%96%E4%BC%B6%E4%BB%83%E5%B2%9B/CRnall_20231104_125242688.jpg?raw=true" alt="矿石湖"></p>
<h3 id="最美公路"><a href="#最美公路" class="headerlink" title="最美公路"></a>最美公路</h3><p>外伶仃岛本就是一座被遗世独立的小岛，远离珠海市区，靠近香港，我徒步抵达时恰为正午，人烟稀少，只有远处鸣笛声声的货轮、呼啸长空的客机以及自由翱翔的鸟类陪伴，好生惬意。这条被誉为“最美公路”的蜿蜒小道是通往山顶的必经之路，也是最佳欣赏海景的不二之路。<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/%E5%A4%96%E4%BC%B6%E4%BB%83%E5%B2%9B/CRnall_20231104_130734561.jpg?raw=true" alt="最美公里"><br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/%E5%A4%96%E4%BC%B6%E4%BB%83%E5%B2%9B/CRnall_20231104_132421420.jpg?raw=true" alt="飞机"><br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/%E5%A4%96%E4%BC%B6%E4%BB%83%E5%B2%9B/CRnall_20231104_132503436.jpg?raw=true" alt="鸟群"></p>
<p>走在这条路上，是我人生最安静的时光。我不需要思考过去和未来，也不必担心现在，只是单纯的享受阳光和大海，很难用语言或是音乐来描述我当时的意境。我坐在高处，阳光毫不吝啬的洒向每片角落，望向远方海天一色的美景，波光粼粼的海面驶过满载的货轮，聆听汩汩的海浪声，老鹰在空中肆意盘旋。我无法停止对蓝天与大海的赞美，我生于斯，也希望死于斯，铭于斯，其魂气无不之也。他总是这样，海纳百川，包容我于所有不完美，接纳我于所有无痛呻吟，即使我没有带来鲜花与热血。在此，我可以同最原始的自己交流，我们不再探讨未来的经济、职业与社交，也不再欣赏音乐与哲学，只是静静地融入这里和倾听心脏平稳的跳动。<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/%E5%A4%96%E4%BC%B6%E4%BB%83%E5%B2%9B/IMG_20231104_160311.jpg?raw=true" alt="自在的独行"></p>
<h3 id="独爱海景"><a href="#独爱海景" class="headerlink" title="独爱海景"></a>独爱海景</h3><p>我独爱海景，世间任何景色都难比于他。他给予我宁静，让我甘愿表露真我；他给予我恐惧，让我理智直面暗潮汹涌；他给予我方向，让我以自己的意志抵达未知。在无数个夜晚，感受到自己浸泡在海水中，随着洋流飘荡，与鱼群为友，与浪花为帆，穿越七大洲八大洋，没有目的，也是所有的目的地。我独爱海景，我无法停止赞美你，请祝福远行的游子早日追寻到她的自由与爱，赞美大海！<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/%E5%A4%96%E4%BC%B6%E4%BB%83%E5%B2%9B/CRnall_20231104_140105678.jpg?raw=true" alt="海洋"><br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/%E5%A4%96%E4%BC%B6%E4%BB%83%E5%B2%9B/CRnall_20231104_151734162.jpg?raw=true" alt="海洋"><br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/%E5%A4%96%E4%BC%B6%E4%BB%83%E5%B2%9B/CRnall_20231104_151854646.jpg?raw=true" alt="海洋"></p>
]]></content>
      <categories>
        <category>个人</category>
      </categories>
      <tags>
        <tag>个人</tag>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>马克思主义原理期末复习</title>
    <url>/2022/12/07/%E9%A9%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E4%B9%89%E5%8E%9F%E7%90%86%E9%A2%98%E7%9B%AE/</url>
    <content><![CDATA[<p>正确率应该在85%以上，只有选择题</p>
<p>尽量使用网页打开文件，实在打不开点击<a href="https://github.com/Aurora7july/Files.github.io/blob/main/%E7%AC%94%E8%AE%B0PDF/%E9%A9%AC%E5%8E%9F%E5%A4%8D%E4%B9%A0.pdf">备份</a>试试看。</p>


	<div class="row">
    <embed src="/pdf/马原复习.pdf" width="100%" height="550" type="application/pdf">
	</div>



]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>旅游-香港</title>
    <url>/2023/12/13/%E6%97%85%E6%B8%B8-%E9%A6%99%E6%B8%AF/</url>
    <content><![CDATA[<h2 id="2023-12-11-2023-12-12-独行香港"><a href="#2023-12-11-2023-12-12-独行香港" class="headerlink" title="2023.12.11-2023.12.12 独行香港"></a>2023.12.11-2023.12.12 独行香港</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>香港有着“东方之珠”的美称，这个名字我以前也只在书中、电视里和母亲的口中听闻，它的繁华和发展早就在深入我心。基于2019年事件和网络上对香港的负面评价，作为一名非粤语母语者，对于香港多少带有恐惧情绪，万般纠结后还是决定亲自去看看这座城市。恰逢考完试有空闲时间，收拾好行李买好票就出发前往独自香港，开启了我的两天一夜香港之旅！</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li>提前准备好八达通或者支付宝的香港地铁卡(我强烈建议用八达通)</li>
<li>旅行时间短可在网上买境外流量包，时间长去便利店买33$的流量卡(50G+1000分钟电话，有效期1年)</li>
<li>换一些零钱，有的店只收现金</li>
<li>上下扶梯靠右站，上下楼靠左走</li>
<li>不要在公众场合抽烟</li>
<li>不要喂鸟类</li>
<li>过海关不要带违禁品，注意携带烟酒数量</li>
</ol>
<h3 id="角色栏"><a href="#角色栏" class="headerlink" title="角色栏"></a>角色栏</h3><ul>
<li>穿着：短袖、短裤、长外套、运动裤、运动鞋</li>
<li>移动方式：步行、地铁、公交、渡轮</li>
<li>证件：港澳通行证、身份证、交通卡、银行卡、过关小票、金巴小票</li>
<li>花费：1000+</li>
<li>其他：充电宝、数据线、转换头</li>
</ul>
<h3 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h3><p>从学校出发，要前往港珠澳大桥珠海关口，最快的方式是乘坐高铁抵达拱北口岸后打车。由于C7611车次临时停运，我只能乘坐C7617，加上打车的时间(直接坐出租车花了23，如果用打车软件会更便宜)近11点才抵达珠海关口。<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/%E9%A6%99%E6%B8%AF%E4%B9%8B%E6%97%85/1.jpg?raw=true" alt="珠海关口"></p>
<p>海关内禁止拍照，我描述一下。从“往香港”的入口随指示牌扫描通行证，按指纹，然后往前走，根据指示票前往穿梭巴士等候站，在大厅记得取票(一定要取票，检票不能用电子的，要扫实体票上的二维码)。跟随人流排队上车，很快就能上车。中午11点左右出发，坐左侧无太阳可看珠海、深圳、香港的城景和反光的大海；右侧有太阳但是看到的海景比左边好看，靠近香港机场可以见到蓝绿的海和缆车。<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/%E9%A6%99%E6%B8%AF%E4%B9%8B%E6%97%85/2.jpg?raw=true" alt="港珠澳大桥"></p>
<p>达到港珠澳大桥香港口岸后，随着人流过海关，下来在门口看到便利店可以在里面购买流量卡。出去之后可以选择搭乘巴士，巴士的价格和地点上面都有写。省钱小技巧：乘坐B5去欣澳站搭乘地铁前往想去的地方会便宜一些。若使用八达通，拍一下就可以上车了；使用支付宝则需要先切换左上角的地点至“中国香港”，后点击出行扫描二维码即可。到达欣澳后，我坐地铁去了深水埗吃饭，出地铁站走几步就看到了一家网红店“新香園 (堅記)” ，那时店里人挺多。一进门老板就热情的用普通话问我几位，我说1位后将我带进里面与两个老太太搭桌，拿着笔和纸问我吃什么。还好提前做了攻略，很快说出“冻奶茶和蛋牛治”，价钱小票和奶茶几乎同时放在我的桌子上，一个来回的功夫蛋牛治也好了，我拍了一张照后就狼吞虎咽的吃了起来。吃完拿着价钱小票去前台，收钱的老板不会讲普通话。“老細，AliPay————41蚊OK咗”，这是我在香港第一句粤语。<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/%E9%A6%99%E6%B8%AF%E4%B9%8B%E6%97%85/3.jpg?raw=true" alt="冻奶茶和蛋牛治"></p>
<p>吃饱喝足在深水埗逛逛，又返回地铁站前往旺角站，去看看那些耳熟能详的站台和真实的香港。走在彌敦道上，来往的人络绎不绝，各种肤色的人穿梭在这条路上。大家都急急忙忙的奔向各自的目的地。汽车在中间车道上快速行驶着，双层的巴士来来往往，红色复古的出租车是香港的特色。道路两侧有着高耸入云的破旧大厦，有的是住宅，有的是办公楼。有时我会看到这些大厦的入口，银色的防盗门，里面漆黑一片，偶尔还有开门的大爷老态龙钟的坐着，与门外的繁华形成了强烈的反差。路上的人也走的很快，旅客、本地人都是如此，伴随着人声、车流声、信号灯机械的提示声，在这些高楼大厦下更有了压迫感。<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/%E9%A6%99%E6%B8%AF%E4%B9%8B%E6%97%85/4.JPEG?raw=true" alt="彌敦道"></p>
<p>走到佐敦地铁站不远处，在彌敦道和柯士甸道交叉路口，我灵光一现想去历史博物馆看看。沿柯士甸道上走，这里远离了大部分的人群，走路也稍微变慢了些，鸽子扑棱着翅膀飞向路灯，四处观察着这座魔幻的城市。走到漆咸道南的十字路口，我惊讶的发现了香港理工大学，不过没有进去参观，只是远远的拍了张照就前往旁边的香港历史博物馆了。<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/%E9%A6%99%E6%B8%AF%E4%B9%8B%E6%97%85/5.JPEG?raw=true" alt="香港理工大学"></p>
<p>博物馆没意思，可能是我没找对<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/%E9%A6%99%E6%B8%AF%E4%B9%8B%E6%97%85/6.JPEG?raw=true" alt="香港历史博物馆"></p>
<p>之后我又重新回到彌敦道，只为了打卡那座大厦————“重庆大厦”<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/%E9%A6%99%E6%B8%AF%E4%B9%8B%E6%97%85/7.JPEG?raw=true" alt="重庆大厦"></p>
<p>继续往前走，我去了李小龙铜像，很多外国人都在铜像前摆着与雕像一致的动作合影留恋。沿着星光大道一路观赏着维多利亚港的美景，那时正好是太阳落山时间，夕阳的余辉洒在这片寸土寸金的大地上显得更加的高雅。<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/%E9%A6%99%E6%B8%AF%E4%B9%8B%E6%97%85/8.JPEG?raw=true" alt="维多利亚港"></p>
<p>路过K11时，外面摆放着Dior的圣诞树，浑身上下都释放着昂贵的气息，引的人们前去打卡拍照，合影留念。<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/%E9%A6%99%E6%B8%AF%E4%B9%8B%E6%97%85/9.JPEG?raw=true" alt="Dior"></p>
<p>本来想去香港岛吃晚饭的，肚子实在太饿了，但是周边又没有什么好吃的，没办法，看到了麦当劳…谁来香港吃国际连锁快餐啊喂！我靠还真的好贵，而且味道没有特别的。这里有个小插曲，有个1.9m的白男似乎想续杯咖啡，前台的那个姐姐仰着头，义正言辞的说“NO”，似乎还有点生气，我有点害怕。巧的是，下一个取餐的是我，我说了句“雷猴”把小票递给她(我不会念数字)，拿着我的餐就跑，不敢有太多的接触，社恐本人了。<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/%E9%A6%99%E6%B8%AF%E4%B9%8B%E6%97%85/0b3ff7ece70b03124e4f2da6561400a.jpg?raw=true" alt="M记"></p>
<p>吃完饭外面也天黑了，终于可以看到维港的夜景了，为了这个夜景我才选择留在香港一晚。真的非常漂亮，比我2010年第一次去上海时还要震撼。坐在天星轮渡上，我甚至忘记了多拍几张相，而是静静的欣赏这座城市，非常喜欢。<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/%E9%A6%99%E6%B8%AF%E4%B9%8B%E6%97%85/10.JPEG?raw=true" alt="维港夜景"></p>
<p>乘坐渡轮到达中环码头，就可以看见香港摩天轮，买票加上车排队共花了近40分钟，20蚊上去转三圈。在摩天轮上看香港的夜景真的很美，也不贵，还能听旁边两个老外讲英语笑话。<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/%E9%A6%99%E6%B8%AF%E4%B9%8B%E6%97%85/11.JPEG?raw=true" alt="香港摩天轮"></p>
<p>结束了Day1中计划的最后一个部分，我就要前往酒店了。决定步行前往，切身感受下香港岛的高级打工地，这里的人西装革履总是在打电话，神情严肃，走路飞快，但是人不多。在这里总是有种窒息感和压力，偶尔几天我觉得还挺舒服的，时间久了可能就…快靠近酒店时我还迷路了，Google map和高德都不准，没办法，我只能根据店名来判断，地图上的大厦名我根本找不到，好在最后还是找到了酒店。前台的小哥很好，我说普通话也很耐心的帮我办理手续，并且免费给我升级了房型。晚上10点半肚子饿了，跑到楼下711买吃的，附近有几家酒吧，不过不吵也不会觉得不安全。一个人住酒店莫名有些害怕，开了一晚上的灯睡觉，休息的还算不错。Day1就在睡梦中结束了。<br><img src="" alt="高级大床房"></p>
<h3 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h3><p>早上8点多才起床，收拾好东西下楼check out，前往附近一家很出名的车仔面吃早餐。这家店“车仔面之家”已经开了60多年了，本地人也很喜欢吃，他家的特点是“立食”，因为店小只能站着吃，而且只收现金。里面的阿婆不太听得懂普通话，我的“幼面”和“油面”不太听得清，很耐心给我指着哪个面。点了配料之后在纸上给我写“35$”，我点的是“小份幼面+鱼蛋+鱿鱼”，他家的鱿鱼和猪大肠很出名。出餐也很快，接过面放在桌子上吃了几口我就开始找钱，正好口袋里有个5$的硬币。把钱拿过去时阿婆不在，只有个煮面的靓仔，看着有点凶。我鼓足勇气说“雷猴”他马上微笑过来，看到我把钱放在柜台上说“唔该”，我又回去吃面了，真的好好吃啊。之后来了一个东南亚男人，那个阿婆英语说的也好好啊，那个男人的咖喱味英语我都有点听不懂。<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/%E9%A6%99%E6%B8%AF%E4%B9%8B%E6%97%85/CRnall_20231212_084131779.jpg?raw=true" alt="早餐"></p>
<p>吃饱喝足来到下个目的地，也是我这次来香港的目的之一————办银行卡。我坐地铁前往汇丰银行北角分行，走过去的路上我不敢放慢脚步，生怕走慢了在银行前面犹豫而败北。进入银行，很庆幸里面没什么人，我找前台的姐姐问了这里可不可以开户，姐姐很耐心让我取个号等待。一分钟不到那个姐姐就领着我站在大堂的柜台上办理了。简单的问了我为什么来香港办理银行卡，我答了海淘和投资，姐姐没说什么，让我拿通行证、身份证、过关小票给她，填写信息就好，忙前忙后的，我就负责手机注册了。问了我现在有没有投资，我说有，基金，拿给姐姐看，不知道她看到我的白酒亏6个点是什么心情。旁边另外个姐姐过来问她“佢點解開卡？”“海淘”，以为我听不懂哈哈哈哈。当场下卡，开完就跑。<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/%E9%A6%99%E6%B8%AF%E4%B9%8B%E6%97%85/12.jpg?raw=true" alt="汇丰one"></p>
<p>吃完去太平山，坐的小巴，想体验一下“亡命小巴”的感觉，亡命小巴，现在出发！那个山是真的高，转了好久才到<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/%E9%A6%99%E6%B8%AF%E4%B9%8B%E6%97%85/CRnall_20231212_114109540.jpg?raw=true" alt="太平山"></p>
<p>拍完下山去堅尼地城，本来要去熟食区买的，不会点餐，又跑出来了，去其他店看，不是人多就是好贵，之后去了大家樂，虽然这个也是连锁快餐，不过还是很有香港味道的<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/%E9%A6%99%E6%B8%AF%E4%B9%8B%E6%97%85/CRnall_20231212_130318868.jpg?raw=true" alt="大家樂"></p>
<p>吃饱了就去香港大学了，买了纪念品HKU小熊。另外港大也真的很漂亮，虽然有点小，但是里面的学生给我一种精神气让我莫名有点畏惧，可能是社恐怕被同龄人问路吧hhh。<br><img src="https://github.com/Aurora7july/files/blob/main/%E7%85%A7%E7%89%87/%E9%A6%99%E6%B8%AF%E4%B9%8B%E6%97%85/CRnall_20231212_140430269.jpg?raw=true" alt="HKU"></p>
<p>之后的时间我在港大坐着发呆，下午4点多返回九龙，去找汇丰的ATM机试图改卡的密码，失败，回去了。旅途结束了。</p>
]]></content>
      <categories>
        <category>个人</category>
      </categories>
      <tags>
        <tag>个人</tag>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>量子力学</title>
    <url>/2022/10/25/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="94f1842aaf74c037b57870cae1da197f171bb4b00e77b3f9584c0963687bf7f5"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">测试加密，这里的密码是：test</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
</search>
